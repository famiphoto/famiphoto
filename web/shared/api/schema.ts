/**
 * Generated by orval v7.11.2 🍺
 * Do not edit manually.
 * Famiphoto API
 * OpenAPI spec version: 0.0.0
 */
import axios from 'axios';
import type {
  AxiosRequestConfig,
  AxiosResponse
} from 'axios';

export interface AdminCreateUserRequest {
  /** 取得したいUserIDを指定します */
  userId: string;
  /** 設定したいパスワード */
  password: string;
  /** 管理者権限を付与するか */
  isAdmin?: boolean;
}

export interface AdminCreateUserResponse {
  userId: string;
  isAdmin: boolean;
}

export interface AuthMeResponse {
  userId: string;
  isAdmin: boolean;
}

export interface AuthSignInRequest {
  /** 取得したいUserIDを指定します */
  userId: string;
  /** 設定したいパスワード */
  password: string;
}

export interface AuthSignInResponse {
  userId: string;
  isAdmin: boolean;
}

export interface ErrorResponse {
  /** HTTPステータスコード */
  statusCode: number;
  /** APIが定義するエラーコード */
  errorCode: string;
  /** システムエラーメッセージ詳細(本番環境はなし) */
  errorMessage?: string;
}

export interface HealthResponse {
  status: string;
}

export interface PhotosExifData {
  make: string;
  model: string;
  serialNumber: string;
  dateTimeOriginal: number;
  createDate: number;
  subsecTimeOriginal: string;
  timezoneOffset: string;
  exposureTime: number;
  fNumber: number;
  iso: number;
  focalLength: number;
  focalLengthIn35mm: number;
  exposureProgram: number;
  exposureCompensation: number;
  meteringMode: number;
  flash: number;
  lensMake: string;
  lensModel: string;
  lensSerialNumber: string;
  width: number;
  height: number;
  colorSpace: number;
  whiteBalance: number;
  orientation: PhotosPhotoOrientation;
  software: string;
  firmware: string;
}

export interface PhotosFile {
  fileId: string;
  photoId: string;
  fileType: string;
  fileHash: string;
  fileName: string;
}

export interface PhotosPhoto {
  photoId: string;
  name: string;
  importedAt: string;
  dateTimeOriginal: string;
  previewUrl: string;
  thumbnailUrl: string;
  exifData: PhotosExifData;
  fileTypes: string[];
  files: PhotosFile[];
}

export interface PhotosPhotoItem {
  photoId: string;
  name: string;
  importedAt: string;
  dateTimeOriginal: string;
  previewUrl: string;
  thumbnailUrl: string;
}

export interface PhotosPhotoListResponse {
  items: PhotosPhotoItem[];
  total: number;
  offset: number;
}

export type PhotosPhotoOrientation = typeof PhotosPhotoOrientation[keyof typeof PhotosPhotoOrientation];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const PhotosPhotoOrientation = {
  ExifOrientationNone: 1,
  ExifOrientationHorizontal: 2,
  ExifOrientationRotate180: 3,
  ExifOrientationVertical: 4,
  ExifOrientationHorizontalRotate270: 5,
  ExifOrientationRotate90: 6,
  ExifOrientationHorizontalRotate90: 7,
  ExifOrientationRotate270: 8,
} as const;

export type PhotosGetPhotoListParams = {
limit?: number;
offset?: number;
};

/**
 * @summary ユーザアカウントを作成します
 */
export const adminUserManagementCreateUser = <TData = AxiosResponse<AdminCreateUserResponse>>(
    adminCreateUserRequest: AdminCreateUserRequest, options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.post(
      `/api/admin/users`,
      adminCreateUserRequest,options
    );
  }

/**
 * @summary ユーザアカウントを無効化します
 */
export const adminUserManagementDeleteUser = <TData = AxiosResponse<null>>(
    userId: string, options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.delete(
      `/api/admin/users/${userId}`,options
    ).then((res) => {if (res.data === "") res.data = null; return res as TData;});
  }

/**
 * @summary オリジナルの写真ファイルをダウンロードします
 */
export const assetsGetOriginalFile = <TData = AxiosResponse<Blob>>(
    photoFileId: string, options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.get(
      `/api/assets/original_files/${photoFileId}`,{
        responseType: 'blob',
    ...options,}
    );
  }

/**
 * @summary プレビュー画像を取得します
 */
export const assetsGetPreview = <TData = AxiosResponse<Blob>>(
    photoId: string, options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.get(
      `/api/assets/previews/${photoId}`,{
        responseType: 'blob',
    ...options,}
    );
  }

/**
 * @summary サムネイル画像を取得します
 */
export const assetsGetThumbnail = <TData = AxiosResponse<Blob>>(
    photoId: string, options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.get(
      `/api/assets/thumbnails/${photoId}`,{
        responseType: 'blob',
    ...options,}
    );
  }

/**
 * ログイン中かどうかの判定にも使います。
 * @summary ログイン中ユーザの情報を取得します。
 */
export const authGetMe = <TData = AxiosResponse<AuthMeResponse>>(
     options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.get(
      `/api/auth/me`,options
    );
  }

/**
 * @summary サインイン
 */
export const authPostSignIn = <TData = AxiosResponse<AuthSignInResponse>>(
    authSignInRequest: AuthSignInRequest, options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.post(
      `/api/auth/sign_in`,
      authSignInRequest,options
    );
  }

/**
 * @summary サインアウトします
 */
export const authPostSignOut = <TData = AxiosResponse<null>>(
     options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.post(
      `/api/auth/sign_out`,undefined,options
    ).then((res) => {if (res.data === "") res.data = null; return res as TData;});
  }

/**
 * APIサーバーの状態を確認する
 * @summary ヘルスチェック
 */
export const healthGetHealth = <TData = AxiosResponse<HealthResponse>>(
     options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.get(
      `/api/health`,options
    );
  }

/**
 * @summary 写真一覧を取得します。
 */
export const photosGetPhotoList = <TData = AxiosResponse<PhotosPhotoListResponse>>(
    params?: PhotosGetPhotoListParams, options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.get(
      `/api/photos`,{
    ...options,
        params: {...params, ...options?.params},}
    );
  }

/**
 * @summary 写真情報を取得します。
 */
export const photosGetPhoto = <TData = AxiosResponse<PhotosPhoto>>(
    photoId: string, options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.get(
      `/api/photos/${photoId}`,options
    );
  }

export type AdminUserManagementCreateUserResult = AxiosResponse<AdminCreateUserResponse>
export type AdminUserManagementDeleteUserResult = AxiosResponse<null>
export type AssetsGetOriginalFileResult = AxiosResponse<Blob>
export type AssetsGetPreviewResult = AxiosResponse<Blob>
export type AssetsGetThumbnailResult = AxiosResponse<Blob>
export type AuthGetMeResult = AxiosResponse<AuthMeResponse>
export type AuthPostSignInResult = AxiosResponse<AuthSignInResponse>
export type AuthPostSignOutResult = AxiosResponse<null>
export type HealthGetHealthResult = AxiosResponse<HealthResponse>
export type PhotosGetPhotoListResult = AxiosResponse<PhotosPhotoListResponse>
export type PhotosGetPhotoResult = AxiosResponse<PhotosPhoto>

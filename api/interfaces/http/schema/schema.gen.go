// Package schema provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.5.0 DO NOT EDIT.
package schema

import (
	"fmt"
	"net/http"
	"time"

	"github.com/labstack/echo/v4"
	"github.com/oapi-codegen/runtime"
)

const (
	ApiKeyAuthScopes = "ApiKeyAuth.Scopes"
)

// AdminCreateUserRequest defines model for Admin.CreateUserRequest.
type AdminCreateUserRequest struct {
	// IsAdmin 管理者権限を付与するか
	IsAdmin *bool `json:"isAdmin,omitempty"`

	// Password 設定したいパスワード
	Password string `json:"password"`

	// UserId 取得したいUserIDを指定します
	UserId string `json:"userId"`
}

// AdminCreateUserResponse defines model for Admin.CreateUserResponse.
type AdminCreateUserResponse struct {
	IsAdmin bool   `json:"isAdmin"`
	UserId  string `json:"userId"`
}

// AuthMeResponse defines model for Auth.MeResponse.
type AuthMeResponse struct {
	IsAdmin bool   `json:"isAdmin"`
	UserId  string `json:"userId"`
}

// AuthSignInRequest defines model for Auth.SignInRequest.
type AuthSignInRequest struct {
	// Password 設定したいパスワード
	Password string `json:"password"`

	// UserId 取得したいUserIDを指定します
	UserId string `json:"userId"`
}

// AuthSignInResponse defines model for Auth.SignInResponse.
type AuthSignInResponse struct {
	IsAdmin bool   `json:"isAdmin"`
	UserId  string `json:"userId"`
}

// ErrorResponse defines model for ErrorResponse.
type ErrorResponse struct {
	// ErrorCode APIが定義するエラーコード
	ErrorCode string `json:"errorCode"`

	// ErrorMessage システムエラーメッセージ詳細(本番環境はなし)
	ErrorMessage *string `json:"errorMessage,omitempty"`

	// StatusCode HTTPステータスコード
	StatusCode int `json:"statusCode"`
}

// HealthResponse defines model for HealthResponse.
type HealthResponse struct {
	Status string `json:"status"`
}

// PhotosExifData defines model for Photos.ExifData.
type PhotosExifData struct {
	ColorSpace           int64                  `json:"colorSpace"`
	CreateDate           int64                  `json:"createDate"`
	DateTimeOriginal     int64                  `json:"dateTimeOriginal"`
	ExposureCompensation float64                `json:"exposureCompensation"`
	ExposureProgram      int64                  `json:"exposureProgram"`
	ExposureTime         float64                `json:"exposureTime"`
	FNumber              float64                `json:"fNumber"`
	Firmware             string                 `json:"firmware"`
	Flash                int64                  `json:"flash"`
	FocalLength          float64                `json:"focalLength"`
	FocalLengthIn35mm    float64                `json:"focalLengthIn35mm"`
	Height               int64                  `json:"height"`
	Iso                  int64                  `json:"iso"`
	LensMake             string                 `json:"lensMake"`
	LensModel            string                 `json:"lensModel"`
	LensSerialNumber     string                 `json:"lensSerialNumber"`
	Make                 string                 `json:"make"`
	MeteringMode         int64                  `json:"meteringMode"`
	Model                string                 `json:"model"`
	Orientation          PhotosPhotoOrientation `json:"orientation"`
	SerialNumber         string                 `json:"serialNumber"`
	Software             string                 `json:"software"`
	SubsecTimeOriginal   string                 `json:"subsecTimeOriginal"`
	TimezoneOffset       string                 `json:"timezoneOffset"`
	WhiteBalance         int64                  `json:"whiteBalance"`
	Width                int64                  `json:"width"`
}

// PhotosFile defines model for Photos.File.
type PhotosFile struct {
	FileHash string `json:"fileHash"`
	FileId   string `json:"fileId"`
	FileName string `json:"fileName"`
	FileType string `json:"fileType"`
	PhotoId  string `json:"photoId"`
}

// PhotosPhoto defines model for Photos.Photo.
type PhotosPhoto struct {
	DateTimeOriginal time.Time      `json:"dateTimeOriginal"`
	ExifData         PhotosExifData `json:"exifData"`
	FileTypes        []string       `json:"fileTypes"`
	Files            []PhotosFile   `json:"files"`
	ImportedAt       string         `json:"importedAt"`
	Name             string         `json:"name"`
	PhotoId          string         `json:"photoId"`
	PreviewUrl       string         `json:"previewUrl"`
	ThumbnailUrl     string         `json:"thumbnailUrl"`
}

// PhotosPhotoItem defines model for Photos.PhotoItem.
type PhotosPhotoItem struct {
	DateTimeOriginal time.Time `json:"dateTimeOriginal"`
	ImportedAt       string    `json:"importedAt"`
	Name             string    `json:"name"`
	PhotoId          string    `json:"photoId"`
	PreviewUrl       string    `json:"previewUrl"`
	ThumbnailUrl     string    `json:"thumbnailUrl"`
}

// PhotosPhotoListResponse defines model for Photos.PhotoListResponse.
type PhotosPhotoListResponse struct {
	Items  []PhotosPhotoItem `json:"items"`
	Offset int64             `json:"offset"`
	Total  int64             `json:"total"`
}

// PhotosPhotoOrientation defines model for Photos.PhotoOrientation.
type PhotosPhotoOrientation = int64

// PhotosGetPhotoListParams defines parameters for PhotosGetPhotoList.
type PhotosGetPhotoListParams struct {
	Limit  *int64 `form:"limit,omitempty" json:"limit,omitempty"`
	Offset *int64 `form:"offset,omitempty" json:"offset,omitempty"`
}

// AdminUserManagementCreateUserJSONRequestBody defines body for AdminUserManagementCreateUser for application/json ContentType.
type AdminUserManagementCreateUserJSONRequestBody = AdminCreateUserRequest

// AuthPostSignInJSONRequestBody defines body for AuthPostSignIn for application/json ContentType.
type AuthPostSignInJSONRequestBody = AuthSignInRequest

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// ユーザアカウントを作成します
	// (POST /admin/users)
	AdminUserManagementCreateUser(ctx echo.Context) error
	// ユーザアカウントを無効化します
	// (DELETE /admin/users/{userId})
	AdminUserManagementDeleteUser(ctx echo.Context, userId string) error
	// オリジナルの写真ファイルをダウンロードします
	// (GET /assets/original_files/{photoFileId})
	AssetsGetOriginalFile(ctx echo.Context, photoFileId string) error
	// プレビュー画像を取得します
	// (GET /assets/previews/{photoId})
	AssetsGetPreview(ctx echo.Context, photoId string) error
	// サムネイル画像を取得します
	// (GET /assets/thumbnails/{photoId})
	AssetsGetThumbnail(ctx echo.Context, photoId string) error
	// ログイン中ユーザの情報を取得します。
	// (GET /auth/me)
	AuthGetMe(ctx echo.Context) error
	// サインイン
	// (POST /auth/sign_in)
	AuthPostSignIn(ctx echo.Context) error
	// サインアウトします
	// (POST /auth/sign_out)
	AuthPostSignOut(ctx echo.Context) error
	// ヘルスチェック
	// (GET /health)
	HealthGetHealth(ctx echo.Context) error
	// 写真一覧を取得します。
	// (GET /photos)
	PhotosGetPhotoList(ctx echo.Context, params PhotosGetPhotoListParams) error
	// 写真情報を取得します。
	// (GET /photos/{photoId})
	PhotosGetPhoto(ctx echo.Context, photoId string) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// AdminUserManagementCreateUser converts echo context to params.
func (w *ServerInterfaceWrapper) AdminUserManagementCreateUser(ctx echo.Context) error {
	var err error

	ctx.Set(ApiKeyAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.AdminUserManagementCreateUser(ctx)
	return err
}

// AdminUserManagementDeleteUser converts echo context to params.
func (w *ServerInterfaceWrapper) AdminUserManagementDeleteUser(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "userId" -------------
	var userId string

	err = runtime.BindStyledParameterWithOptions("simple", "userId", ctx.Param("userId"), &userId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter userId: %s", err))
	}

	ctx.Set(ApiKeyAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.AdminUserManagementDeleteUser(ctx, userId)
	return err
}

// AssetsGetOriginalFile converts echo context to params.
func (w *ServerInterfaceWrapper) AssetsGetOriginalFile(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "photoFileId" -------------
	var photoFileId string

	err = runtime.BindStyledParameterWithOptions("simple", "photoFileId", ctx.Param("photoFileId"), &photoFileId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter photoFileId: %s", err))
	}

	ctx.Set(ApiKeyAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.AssetsGetOriginalFile(ctx, photoFileId)
	return err
}

// AssetsGetPreview converts echo context to params.
func (w *ServerInterfaceWrapper) AssetsGetPreview(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "photoId" -------------
	var photoId string

	err = runtime.BindStyledParameterWithOptions("simple", "photoId", ctx.Param("photoId"), &photoId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter photoId: %s", err))
	}

	ctx.Set(ApiKeyAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.AssetsGetPreview(ctx, photoId)
	return err
}

// AssetsGetThumbnail converts echo context to params.
func (w *ServerInterfaceWrapper) AssetsGetThumbnail(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "photoId" -------------
	var photoId string

	err = runtime.BindStyledParameterWithOptions("simple", "photoId", ctx.Param("photoId"), &photoId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter photoId: %s", err))
	}

	ctx.Set(ApiKeyAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.AssetsGetThumbnail(ctx, photoId)
	return err
}

// AuthGetMe converts echo context to params.
func (w *ServerInterfaceWrapper) AuthGetMe(ctx echo.Context) error {
	var err error

	ctx.Set(ApiKeyAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.AuthGetMe(ctx)
	return err
}

// AuthPostSignIn converts echo context to params.
func (w *ServerInterfaceWrapper) AuthPostSignIn(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.AuthPostSignIn(ctx)
	return err
}

// AuthPostSignOut converts echo context to params.
func (w *ServerInterfaceWrapper) AuthPostSignOut(ctx echo.Context) error {
	var err error

	ctx.Set(ApiKeyAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.AuthPostSignOut(ctx)
	return err
}

// HealthGetHealth converts echo context to params.
func (w *ServerInterfaceWrapper) HealthGetHealth(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.HealthGetHealth(ctx)
	return err
}

// PhotosGetPhotoList converts echo context to params.
func (w *ServerInterfaceWrapper) PhotosGetPhotoList(ctx echo.Context) error {
	var err error

	ctx.Set(ApiKeyAuthScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params PhotosGetPhotoListParams
	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", false, false, "limit", ctx.QueryParams(), &params.Limit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter limit: %s", err))
	}

	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", false, false, "offset", ctx.QueryParams(), &params.Offset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter offset: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.PhotosGetPhotoList(ctx, params)
	return err
}

// PhotosGetPhoto converts echo context to params.
func (w *ServerInterfaceWrapper) PhotosGetPhoto(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "photoId" -------------
	var photoId string

	err = runtime.BindStyledParameterWithOptions("simple", "photoId", ctx.Param("photoId"), &photoId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter photoId: %s", err))
	}

	ctx.Set(ApiKeyAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.PhotosGetPhoto(ctx, photoId)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface) {
	RegisterHandlersWithBaseURL(router, si, "")
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.POST(baseURL+"/admin/users", wrapper.AdminUserManagementCreateUser)
	router.DELETE(baseURL+"/admin/users/:userId", wrapper.AdminUserManagementDeleteUser)
	router.GET(baseURL+"/assets/original_files/:photoFileId", wrapper.AssetsGetOriginalFile)
	router.GET(baseURL+"/assets/previews/:photoId", wrapper.AssetsGetPreview)
	router.GET(baseURL+"/assets/thumbnails/:photoId", wrapper.AssetsGetThumbnail)
	router.GET(baseURL+"/auth/me", wrapper.AuthGetMe)
	router.POST(baseURL+"/auth/sign_in", wrapper.AuthPostSignIn)
	router.POST(baseURL+"/auth/sign_out", wrapper.AuthPostSignOut)
	router.GET(baseURL+"/health", wrapper.HealthGetHealth)
	router.GET(baseURL+"/photos", wrapper.PhotosGetPhotoList)
	router.GET(baseURL+"/photos/:photoId", wrapper.PhotosGetPhoto)

}

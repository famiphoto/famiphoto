// Package schema provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.4.1 DO NOT EDIT.
package schema

import (
	"fmt"
	"net/http"

	"github.com/labstack/echo/v4"
	"github.com/oapi-codegen/runtime"
)

const (
	CookieAuthScopes = "cookieAuth.Scopes"
)

// ErrorResponse エラーレスポンス
type ErrorResponse struct {
	// ErrorCode APIが定義するエラーコード
	ErrorCode string `json:"errorCode"`

	// ErrorMessage システムエラーメッセージ詳細(本番環境はなし)
	ErrorMessage *string `json:"errorMessage,omitempty"`

	// StatusCode HTTPステータスコード
	StatusCode int `json:"statusCode"`
}

// GetPhotoListItem defines model for GetPhotoListItem.
type GetPhotoListItem struct {
	PhotoId int `json:"photoId"`
}

// GetPhotoListResponse defines model for GetPhotoListResponse.
type GetPhotoListResponse struct {
	Items []GetPhotoListItem `json:"items"`
	Total int                `json:"total"`
}

// GetPhotoResponse defines model for GetPhotoResponse.
type GetPhotoResponse struct {
	PhotoId   int    `json:"photoId"`
	PhotoName string `json:"photoName"`
}

// HealthResponse defines model for HealthResponse.
type HealthResponse struct {
	Status string `json:"status"`
}

// SignInResponse defines model for SignInResponse.
type SignInResponse struct {
	MyId     string `json:"myId" validate:"required"`
	Password string `json:"password" validate:"required"`
}

// SignUpJSONBody defines parameters for SignUp.
type SignUpJSONBody struct {
	IsAdmin bool `json:"isAdmin"`

	// MyId 取得したいMyIDを指定します。
	MyId     string `json:"myId" validate:"required"`
	Password string `json:"password" validate:"required"`
}

// GetPhotosParams defines parameters for GetPhotos.
type GetPhotosParams struct {
	Limit  *int `form:"limit,omitempty" json:"limit,omitempty"`
	Offset *int `form:"offset,omitempty" json:"offset,omitempty"`
}

// SignInJSONRequestBody defines body for SignIn for application/json ContentType.
type SignInJSONRequestBody = SignInResponse

// SignUpJSONRequestBody defines body for SignUp for application/json ContentType.
type SignUpJSONRequestBody SignUpJSONBody

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// サインインします。
	// (POST /auth/sign_in)
	SignIn(ctx echo.Context) error
	// サインアウトします。
	// (POST /auth/sign_out)
	SignOut(ctx echo.Context) error
	// アカウント作成
	// (POST /auth/sign_up)
	SignUp(ctx echo.Context) error
	// ヘルスチェック
	// (GET /health)
	Health(ctx echo.Context) error
	// 写真一覧を取得します。
	// (GET /photos)
	GetPhotos(ctx echo.Context, params GetPhotosParams) error
	// 写真情報を取得します。
	// (GET /photos/{photoId})
	GetPhoto(ctx echo.Context, photoId int) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// SignIn converts echo context to params.
func (w *ServerInterfaceWrapper) SignIn(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.SignIn(ctx)
	return err
}

// SignOut converts echo context to params.
func (w *ServerInterfaceWrapper) SignOut(ctx echo.Context) error {
	var err error

	ctx.Set(CookieAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.SignOut(ctx)
	return err
}

// SignUp converts echo context to params.
func (w *ServerInterfaceWrapper) SignUp(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.SignUp(ctx)
	return err
}

// Health converts echo context to params.
func (w *ServerInterfaceWrapper) Health(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.Health(ctx)
	return err
}

// GetPhotos converts echo context to params.
func (w *ServerInterfaceWrapper) GetPhotos(ctx echo.Context) error {
	var err error

	ctx.Set(CookieAuthScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetPhotosParams
	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", ctx.QueryParams(), &params.Limit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter limit: %s", err))
	}

	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", ctx.QueryParams(), &params.Offset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter offset: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetPhotos(ctx, params)
	return err
}

// GetPhoto converts echo context to params.
func (w *ServerInterfaceWrapper) GetPhoto(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "photoId" -------------
	var photoId int

	err = runtime.BindStyledParameterWithOptions("simple", "photoId", ctx.Param("photoId"), &photoId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter photoId: %s", err))
	}

	ctx.Set(CookieAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetPhoto(ctx, photoId)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface) {
	RegisterHandlersWithBaseURL(router, si, "")
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.POST(baseURL+"/auth/sign_in", wrapper.SignIn)
	router.POST(baseURL+"/auth/sign_out", wrapper.SignOut)
	router.POST(baseURL+"/auth/sign_up", wrapper.SignUp)
	router.GET(baseURL+"/health", wrapper.Health)
	router.GET(baseURL+"/photos", wrapper.GetPhotos)
	router.GET(baseURL+"/photos/:photoId", wrapper.GetPhoto)

}

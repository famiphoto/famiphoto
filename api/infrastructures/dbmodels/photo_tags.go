// Code generated by SQLBoiler 4.19.1 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package dbmodels

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// PhotoTag is an object representing the database table.
type PhotoTag struct {
	PhotoTagID string    `boil:"photo_tag_id" json:"photo_tag_id" toml:"photo_tag_id" yaml:"photo_tag_id"`
	Tag        string    `boil:"tag" json:"tag" toml:"tag" yaml:"tag"`
	CreatedAt  time.Time `boil:"created_at" json:"created_at" toml:"created_at" yaml:"created_at"`
	UpdatedAt  time.Time `boil:"updated_at" json:"updated_at" toml:"updated_at" yaml:"updated_at"`

	R *photoTagR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L photoTagL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var PhotoTagColumns = struct {
	PhotoTagID string
	Tag        string
	CreatedAt  string
	UpdatedAt  string
}{
	PhotoTagID: "photo_tag_id",
	Tag:        "tag",
	CreatedAt:  "created_at",
	UpdatedAt:  "updated_at",
}

var PhotoTagTableColumns = struct {
	PhotoTagID string
	Tag        string
	CreatedAt  string
	UpdatedAt  string
}{
	PhotoTagID: "photo_tags.photo_tag_id",
	Tag:        "photo_tags.tag",
	CreatedAt:  "photo_tags.created_at",
	UpdatedAt:  "photo_tags.updated_at",
}

// Generated where

var PhotoTagWhere = struct {
	PhotoTagID whereHelperstring
	Tag        whereHelperstring
	CreatedAt  whereHelpertime_Time
	UpdatedAt  whereHelpertime_Time
}{
	PhotoTagID: whereHelperstring{field: "`photo_tags`.`photo_tag_id`"},
	Tag:        whereHelperstring{field: "`photo_tags`.`tag`"},
	CreatedAt:  whereHelpertime_Time{field: "`photo_tags`.`created_at`"},
	UpdatedAt:  whereHelpertime_Time{field: "`photo_tags`.`updated_at`"},
}

// PhotoTagRels is where relationship names are stored.
var PhotoTagRels = struct {
	PhotosPhotoTags string
}{
	PhotosPhotoTags: "PhotosPhotoTags",
}

// photoTagR is where relationships are stored.
type photoTagR struct {
	PhotosPhotoTags PhotosPhotoTagSlice `boil:"PhotosPhotoTags" json:"PhotosPhotoTags" toml:"PhotosPhotoTags" yaml:"PhotosPhotoTags"`
}

// NewStruct creates a new relationship struct
func (*photoTagR) NewStruct() *photoTagR {
	return &photoTagR{}
}

func (o *PhotoTag) GetPhotosPhotoTags() PhotosPhotoTagSlice {
	if o == nil {
		return nil
	}

	return o.R.GetPhotosPhotoTags()
}

func (r *photoTagR) GetPhotosPhotoTags() PhotosPhotoTagSlice {
	if r == nil {
		return nil
	}

	return r.PhotosPhotoTags
}

// photoTagL is where Load methods for each relationship are stored.
type photoTagL struct{}

var (
	photoTagAllColumns            = []string{"photo_tag_id", "tag", "created_at", "updated_at"}
	photoTagColumnsWithoutDefault = []string{"photo_tag_id", "tag"}
	photoTagColumnsWithDefault    = []string{"created_at", "updated_at"}
	photoTagPrimaryKeyColumns     = []string{"photo_tag_id"}
	photoTagGeneratedColumns      = []string{}
)

type (
	// PhotoTagSlice is an alias for a slice of pointers to PhotoTag.
	// This should almost always be used instead of []PhotoTag.
	PhotoTagSlice []*PhotoTag
	// PhotoTagHook is the signature for custom PhotoTag hook methods
	PhotoTagHook func(context.Context, boil.ContextExecutor, *PhotoTag) error

	photoTagQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	photoTagType                 = reflect.TypeOf(&PhotoTag{})
	photoTagMapping              = queries.MakeStructMapping(photoTagType)
	photoTagPrimaryKeyMapping, _ = queries.BindMapping(photoTagType, photoTagMapping, photoTagPrimaryKeyColumns)
	photoTagInsertCacheMut       sync.RWMutex
	photoTagInsertCache          = make(map[string]insertCache)
	photoTagUpdateCacheMut       sync.RWMutex
	photoTagUpdateCache          = make(map[string]updateCache)
	photoTagUpsertCacheMut       sync.RWMutex
	photoTagUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var photoTagAfterSelectMu sync.Mutex
var photoTagAfterSelectHooks []PhotoTagHook

var photoTagBeforeInsertMu sync.Mutex
var photoTagBeforeInsertHooks []PhotoTagHook
var photoTagAfterInsertMu sync.Mutex
var photoTagAfterInsertHooks []PhotoTagHook

var photoTagBeforeUpdateMu sync.Mutex
var photoTagBeforeUpdateHooks []PhotoTagHook
var photoTagAfterUpdateMu sync.Mutex
var photoTagAfterUpdateHooks []PhotoTagHook

var photoTagBeforeDeleteMu sync.Mutex
var photoTagBeforeDeleteHooks []PhotoTagHook
var photoTagAfterDeleteMu sync.Mutex
var photoTagAfterDeleteHooks []PhotoTagHook

var photoTagBeforeUpsertMu sync.Mutex
var photoTagBeforeUpsertHooks []PhotoTagHook
var photoTagAfterUpsertMu sync.Mutex
var photoTagAfterUpsertHooks []PhotoTagHook

// doAfterSelectHooks executes all "after Select" hooks.
func (o *PhotoTag) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range photoTagAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *PhotoTag) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range photoTagBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *PhotoTag) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range photoTagAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *PhotoTag) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range photoTagBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *PhotoTag) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range photoTagAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *PhotoTag) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range photoTagBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *PhotoTag) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range photoTagAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *PhotoTag) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range photoTagBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *PhotoTag) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range photoTagAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddPhotoTagHook registers your hook function for all future operations.
func AddPhotoTagHook(hookPoint boil.HookPoint, photoTagHook PhotoTagHook) {
	switch hookPoint {
	case boil.AfterSelectHook:
		photoTagAfterSelectMu.Lock()
		photoTagAfterSelectHooks = append(photoTagAfterSelectHooks, photoTagHook)
		photoTagAfterSelectMu.Unlock()
	case boil.BeforeInsertHook:
		photoTagBeforeInsertMu.Lock()
		photoTagBeforeInsertHooks = append(photoTagBeforeInsertHooks, photoTagHook)
		photoTagBeforeInsertMu.Unlock()
	case boil.AfterInsertHook:
		photoTagAfterInsertMu.Lock()
		photoTagAfterInsertHooks = append(photoTagAfterInsertHooks, photoTagHook)
		photoTagAfterInsertMu.Unlock()
	case boil.BeforeUpdateHook:
		photoTagBeforeUpdateMu.Lock()
		photoTagBeforeUpdateHooks = append(photoTagBeforeUpdateHooks, photoTagHook)
		photoTagBeforeUpdateMu.Unlock()
	case boil.AfterUpdateHook:
		photoTagAfterUpdateMu.Lock()
		photoTagAfterUpdateHooks = append(photoTagAfterUpdateHooks, photoTagHook)
		photoTagAfterUpdateMu.Unlock()
	case boil.BeforeDeleteHook:
		photoTagBeforeDeleteMu.Lock()
		photoTagBeforeDeleteHooks = append(photoTagBeforeDeleteHooks, photoTagHook)
		photoTagBeforeDeleteMu.Unlock()
	case boil.AfterDeleteHook:
		photoTagAfterDeleteMu.Lock()
		photoTagAfterDeleteHooks = append(photoTagAfterDeleteHooks, photoTagHook)
		photoTagAfterDeleteMu.Unlock()
	case boil.BeforeUpsertHook:
		photoTagBeforeUpsertMu.Lock()
		photoTagBeforeUpsertHooks = append(photoTagBeforeUpsertHooks, photoTagHook)
		photoTagBeforeUpsertMu.Unlock()
	case boil.AfterUpsertHook:
		photoTagAfterUpsertMu.Lock()
		photoTagAfterUpsertHooks = append(photoTagAfterUpsertHooks, photoTagHook)
		photoTagAfterUpsertMu.Unlock()
	}
}

// One returns a single photoTag record from the query.
func (q photoTagQuery) One(ctx context.Context, exec boil.ContextExecutor) (*PhotoTag, error) {
	o := &PhotoTag{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "dbmodels: failed to execute a one query for photo_tags")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all PhotoTag records from the query.
func (q photoTagQuery) All(ctx context.Context, exec boil.ContextExecutor) (PhotoTagSlice, error) {
	var o []*PhotoTag

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "dbmodels: failed to assign all query results to PhotoTag slice")
	}

	if len(photoTagAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all PhotoTag records in the query.
func (q photoTagQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "dbmodels: failed to count photo_tags rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q photoTagQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "dbmodels: failed to check if photo_tags exists")
	}

	return count > 0, nil
}

// PhotosPhotoTags retrieves all the photos_photo_tag's PhotosPhotoTags with an executor.
func (o *PhotoTag) PhotosPhotoTags(mods ...qm.QueryMod) photosPhotoTagQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("`photos_photo_tags`.`photo_tag_id`=?", o.PhotoTagID),
	)

	return PhotosPhotoTags(queryMods...)
}

// LoadPhotosPhotoTags allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (photoTagL) LoadPhotosPhotoTags(ctx context.Context, e boil.ContextExecutor, singular bool, maybePhotoTag interface{}, mods queries.Applicator) error {
	var slice []*PhotoTag
	var object *PhotoTag

	if singular {
		var ok bool
		object, ok = maybePhotoTag.(*PhotoTag)
		if !ok {
			object = new(PhotoTag)
			ok = queries.SetFromEmbeddedStruct(&object, &maybePhotoTag)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybePhotoTag))
			}
		}
	} else {
		s, ok := maybePhotoTag.(*[]*PhotoTag)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybePhotoTag)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybePhotoTag))
			}
		}
	}

	args := make(map[interface{}]struct{})
	if singular {
		if object.R == nil {
			object.R = &photoTagR{}
		}
		args[object.PhotoTagID] = struct{}{}
	} else {
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &photoTagR{}
			}
			args[obj.PhotoTagID] = struct{}{}
		}
	}

	if len(args) == 0 {
		return nil
	}

	argsSlice := make([]interface{}, len(args))
	i := 0
	for arg := range args {
		argsSlice[i] = arg
		i++
	}

	query := NewQuery(
		qm.From(`photos_photo_tags`),
		qm.WhereIn(`photos_photo_tags.photo_tag_id in ?`, argsSlice...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load photos_photo_tags")
	}

	var resultSlice []*PhotosPhotoTag
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice photos_photo_tags")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on photos_photo_tags")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for photos_photo_tags")
	}

	if len(photosPhotoTagAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.PhotosPhotoTags = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &photosPhotoTagR{}
			}
			foreign.R.PhotoTag = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.PhotoTagID == foreign.PhotoTagID {
				local.R.PhotosPhotoTags = append(local.R.PhotosPhotoTags, foreign)
				if foreign.R == nil {
					foreign.R = &photosPhotoTagR{}
				}
				foreign.R.PhotoTag = local
				break
			}
		}
	}

	return nil
}

// AddPhotosPhotoTags adds the given related objects to the existing relationships
// of the photo_tag, optionally inserting them as new records.
// Appends related to o.R.PhotosPhotoTags.
// Sets related.R.PhotoTag appropriately.
func (o *PhotoTag) AddPhotosPhotoTags(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*PhotosPhotoTag) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.PhotoTagID = o.PhotoTagID
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE `photos_photo_tags` SET %s WHERE %s",
				strmangle.SetParamNames("`", "`", 0, []string{"photo_tag_id"}),
				strmangle.WhereClause("`", "`", 0, photosPhotoTagPrimaryKeyColumns),
			)
			values := []interface{}{o.PhotoTagID, rel.PhotoID, rel.PhotoTagID}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.PhotoTagID = o.PhotoTagID
		}
	}

	if o.R == nil {
		o.R = &photoTagR{
			PhotosPhotoTags: related,
		}
	} else {
		o.R.PhotosPhotoTags = append(o.R.PhotosPhotoTags, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &photosPhotoTagR{
				PhotoTag: o,
			}
		} else {
			rel.R.PhotoTag = o
		}
	}
	return nil
}

// PhotoTags retrieves all the records using an executor.
func PhotoTags(mods ...qm.QueryMod) photoTagQuery {
	mods = append(mods, qm.From("`photo_tags`"))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"`photo_tags`.*"})
	}

	return photoTagQuery{q}
}

// FindPhotoTag retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindPhotoTag(ctx context.Context, exec boil.ContextExecutor, photoTagID string, selectCols ...string) (*PhotoTag, error) {
	photoTagObj := &PhotoTag{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from `photo_tags` where `photo_tag_id`=?", sel,
	)

	q := queries.Raw(query, photoTagID)

	err := q.Bind(ctx, exec, photoTagObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "dbmodels: unable to select from photo_tags")
	}

	if err = photoTagObj.doAfterSelectHooks(ctx, exec); err != nil {
		return photoTagObj, err
	}

	return photoTagObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *PhotoTag) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("dbmodels: no photo_tags provided for insertion")
	}

	var err error
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if o.CreatedAt.IsZero() {
			o.CreatedAt = currTime
		}
		if o.UpdatedAt.IsZero() {
			o.UpdatedAt = currTime
		}
	}

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(photoTagColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	photoTagInsertCacheMut.RLock()
	cache, cached := photoTagInsertCache[key]
	photoTagInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			photoTagAllColumns,
			photoTagColumnsWithDefault,
			photoTagColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(photoTagType, photoTagMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(photoTagType, photoTagMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO `photo_tags` (`%s`) %%sVALUES (%s)%%s", strings.Join(wl, "`,`"), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO `photo_tags` () VALUES ()%s%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			cache.retQuery = fmt.Sprintf("SELECT `%s` FROM `photo_tags` WHERE %s", strings.Join(returnColumns, "`,`"), strmangle.WhereClause("`", "`", 0, photoTagPrimaryKeyColumns))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	_, err = exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "dbmodels: unable to insert into photo_tags")
	}

	var identifierCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	identifierCols = []interface{}{
		o.PhotoTagID,
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.retQuery)
		fmt.Fprintln(writer, identifierCols...)
	}
	err = exec.QueryRowContext(ctx, cache.retQuery, identifierCols...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	if err != nil {
		return errors.Wrap(err, "dbmodels: unable to populate default values for photo_tags")
	}

CacheNoHooks:
	if !cached {
		photoTagInsertCacheMut.Lock()
		photoTagInsertCache[key] = cache
		photoTagInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the PhotoTag.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *PhotoTag) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		o.UpdatedAt = currTime
	}

	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	photoTagUpdateCacheMut.RLock()
	cache, cached := photoTagUpdateCache[key]
	photoTagUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			photoTagAllColumns,
			photoTagPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("dbmodels: unable to update photo_tags, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE `photo_tags` SET %s WHERE %s",
			strmangle.SetParamNames("`", "`", 0, wl),
			strmangle.WhereClause("`", "`", 0, photoTagPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(photoTagType, photoTagMapping, append(wl, photoTagPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "dbmodels: unable to update photo_tags row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "dbmodels: failed to get rows affected by update for photo_tags")
	}

	if !cached {
		photoTagUpdateCacheMut.Lock()
		photoTagUpdateCache[key] = cache
		photoTagUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q photoTagQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "dbmodels: unable to update all for photo_tags")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "dbmodels: unable to retrieve rows affected for photo_tags")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o PhotoTagSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("dbmodels: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), photoTagPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE `photo_tags` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, photoTagPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "dbmodels: unable to update all in photoTag slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "dbmodels: unable to retrieve rows affected all in update all photoTag")
	}
	return rowsAff, nil
}

var mySQLPhotoTagUniqueColumns = []string{
	"photo_tag_id",
	"tag",
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *PhotoTag) Upsert(ctx context.Context, exec boil.ContextExecutor, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("dbmodels: no photo_tags provided for upsert")
	}
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if o.CreatedAt.IsZero() {
			o.CreatedAt = currTime
		}
		o.UpdatedAt = currTime
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(photoTagColumnsWithDefault, o)
	nzUniques := queries.NonZeroDefaultSet(mySQLPhotoTagUniqueColumns, o)

	if len(nzUniques) == 0 {
		return errors.New("cannot upsert with a table that cannot conflict on a unique column")
	}

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzUniques {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	photoTagUpsertCacheMut.RLock()
	cache, cached := photoTagUpsertCache[key]
	photoTagUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, _ := insertColumns.InsertColumnSet(
			photoTagAllColumns,
			photoTagColumnsWithDefault,
			photoTagColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			photoTagAllColumns,
			photoTagPrimaryKeyColumns,
		)

		if !updateColumns.IsNone() && len(update) == 0 {
			return errors.New("dbmodels: unable to upsert photo_tags, could not build update column list")
		}

		ret := strmangle.SetComplement(photoTagAllColumns, strmangle.SetIntersect(insert, update))

		cache.query = buildUpsertQueryMySQL(dialect, "`photo_tags`", update, insert)
		cache.retQuery = fmt.Sprintf(
			"SELECT %s FROM `photo_tags` WHERE %s",
			strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, ret), ","),
			strmangle.WhereClause("`", "`", 0, nzUniques),
		)

		cache.valueMapping, err = queries.BindMapping(photoTagType, photoTagMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(photoTagType, photoTagMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	_, err = exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "dbmodels: unable to upsert for photo_tags")
	}

	var uniqueMap []uint64
	var nzUniqueCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	uniqueMap, err = queries.BindMapping(photoTagType, photoTagMapping, nzUniques)
	if err != nil {
		return errors.Wrap(err, "dbmodels: unable to retrieve unique values for photo_tags")
	}
	nzUniqueCols = queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), uniqueMap)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.retQuery)
		fmt.Fprintln(writer, nzUniqueCols...)
	}
	err = exec.QueryRowContext(ctx, cache.retQuery, nzUniqueCols...).Scan(returns...)
	if err != nil {
		return errors.Wrap(err, "dbmodels: unable to populate default values for photo_tags")
	}

CacheNoHooks:
	if !cached {
		photoTagUpsertCacheMut.Lock()
		photoTagUpsertCache[key] = cache
		photoTagUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single PhotoTag record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *PhotoTag) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("dbmodels: no PhotoTag provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), photoTagPrimaryKeyMapping)
	sql := "DELETE FROM `photo_tags` WHERE `photo_tag_id`=?"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "dbmodels: unable to delete from photo_tags")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "dbmodels: failed to get rows affected by delete for photo_tags")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q photoTagQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("dbmodels: no photoTagQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "dbmodels: unable to delete all from photo_tags")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "dbmodels: failed to get rows affected by deleteall for photo_tags")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o PhotoTagSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(photoTagBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), photoTagPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM `photo_tags` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, photoTagPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "dbmodels: unable to delete all from photoTag slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "dbmodels: failed to get rows affected by deleteall for photo_tags")
	}

	if len(photoTagAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *PhotoTag) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindPhotoTag(ctx, exec, o.PhotoTagID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *PhotoTagSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := PhotoTagSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), photoTagPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT `photo_tags`.* FROM `photo_tags` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, photoTagPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "dbmodels: unable to reload all in PhotoTagSlice")
	}

	*o = slice

	return nil
}

// PhotoTagExists checks if the PhotoTag row exists.
func PhotoTagExists(ctx context.Context, exec boil.ContextExecutor, photoTagID string) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from `photo_tags` where `photo_tag_id`=? limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, photoTagID)
	}
	row := exec.QueryRowContext(ctx, sql, photoTagID)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "dbmodels: unable to check if photo_tags exists")
	}

	return exists, nil
}

// Exists checks if the PhotoTag row exists.
func (o *PhotoTag) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	return PhotoTagExists(ctx, exec, o.PhotoTagID)
}

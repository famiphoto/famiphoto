// Code generated by SQLBoiler 4.19.1 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package dbmodels

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// PhotosPhotoTag is an object representing the database table.
type PhotosPhotoTag struct {
	PhotoID    string    `boil:"photo_id" json:"photo_id" toml:"photo_id" yaml:"photo_id"`
	PhotoTagID string    `boil:"photo_tag_id" json:"photo_tag_id" toml:"photo_tag_id" yaml:"photo_tag_id"`
	CreatedAt  time.Time `boil:"created_at" json:"created_at" toml:"created_at" yaml:"created_at"`
	UpdatedAt  time.Time `boil:"updated_at" json:"updated_at" toml:"updated_at" yaml:"updated_at"`

	R *photosPhotoTagR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L photosPhotoTagL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var PhotosPhotoTagColumns = struct {
	PhotoID    string
	PhotoTagID string
	CreatedAt  string
	UpdatedAt  string
}{
	PhotoID:    "photo_id",
	PhotoTagID: "photo_tag_id",
	CreatedAt:  "created_at",
	UpdatedAt:  "updated_at",
}

var PhotosPhotoTagTableColumns = struct {
	PhotoID    string
	PhotoTagID string
	CreatedAt  string
	UpdatedAt  string
}{
	PhotoID:    "photos_photo_tags.photo_id",
	PhotoTagID: "photos_photo_tags.photo_tag_id",
	CreatedAt:  "photos_photo_tags.created_at",
	UpdatedAt:  "photos_photo_tags.updated_at",
}

// Generated where

var PhotosPhotoTagWhere = struct {
	PhotoID    whereHelperstring
	PhotoTagID whereHelperstring
	CreatedAt  whereHelpertime_Time
	UpdatedAt  whereHelpertime_Time
}{
	PhotoID:    whereHelperstring{field: "`photos_photo_tags`.`photo_id`"},
	PhotoTagID: whereHelperstring{field: "`photos_photo_tags`.`photo_tag_id`"},
	CreatedAt:  whereHelpertime_Time{field: "`photos_photo_tags`.`created_at`"},
	UpdatedAt:  whereHelpertime_Time{field: "`photos_photo_tags`.`updated_at`"},
}

// PhotosPhotoTagRels is where relationship names are stored.
var PhotosPhotoTagRels = struct {
	PhotoTag string
	Photo    string
}{
	PhotoTag: "PhotoTag",
	Photo:    "Photo",
}

// photosPhotoTagR is where relationships are stored.
type photosPhotoTagR struct {
	PhotoTag *PhotoTag `boil:"PhotoTag" json:"PhotoTag" toml:"PhotoTag" yaml:"PhotoTag"`
	Photo    *Photo    `boil:"Photo" json:"Photo" toml:"Photo" yaml:"Photo"`
}

// NewStruct creates a new relationship struct
func (*photosPhotoTagR) NewStruct() *photosPhotoTagR {
	return &photosPhotoTagR{}
}

func (o *PhotosPhotoTag) GetPhotoTag() *PhotoTag {
	if o == nil {
		return nil
	}

	return o.R.GetPhotoTag()
}

func (r *photosPhotoTagR) GetPhotoTag() *PhotoTag {
	if r == nil {
		return nil
	}

	return r.PhotoTag
}

func (o *PhotosPhotoTag) GetPhoto() *Photo {
	if o == nil {
		return nil
	}

	return o.R.GetPhoto()
}

func (r *photosPhotoTagR) GetPhoto() *Photo {
	if r == nil {
		return nil
	}

	return r.Photo
}

// photosPhotoTagL is where Load methods for each relationship are stored.
type photosPhotoTagL struct{}

var (
	photosPhotoTagAllColumns            = []string{"photo_id", "photo_tag_id", "created_at", "updated_at"}
	photosPhotoTagColumnsWithoutDefault = []string{"photo_id", "photo_tag_id"}
	photosPhotoTagColumnsWithDefault    = []string{"created_at", "updated_at"}
	photosPhotoTagPrimaryKeyColumns     = []string{"photo_id", "photo_tag_id"}
	photosPhotoTagGeneratedColumns      = []string{}
)

type (
	// PhotosPhotoTagSlice is an alias for a slice of pointers to PhotosPhotoTag.
	// This should almost always be used instead of []PhotosPhotoTag.
	PhotosPhotoTagSlice []*PhotosPhotoTag
	// PhotosPhotoTagHook is the signature for custom PhotosPhotoTag hook methods
	PhotosPhotoTagHook func(context.Context, boil.ContextExecutor, *PhotosPhotoTag) error

	photosPhotoTagQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	photosPhotoTagType                 = reflect.TypeOf(&PhotosPhotoTag{})
	photosPhotoTagMapping              = queries.MakeStructMapping(photosPhotoTagType)
	photosPhotoTagPrimaryKeyMapping, _ = queries.BindMapping(photosPhotoTagType, photosPhotoTagMapping, photosPhotoTagPrimaryKeyColumns)
	photosPhotoTagInsertCacheMut       sync.RWMutex
	photosPhotoTagInsertCache          = make(map[string]insertCache)
	photosPhotoTagUpdateCacheMut       sync.RWMutex
	photosPhotoTagUpdateCache          = make(map[string]updateCache)
	photosPhotoTagUpsertCacheMut       sync.RWMutex
	photosPhotoTagUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var photosPhotoTagAfterSelectMu sync.Mutex
var photosPhotoTagAfterSelectHooks []PhotosPhotoTagHook

var photosPhotoTagBeforeInsertMu sync.Mutex
var photosPhotoTagBeforeInsertHooks []PhotosPhotoTagHook
var photosPhotoTagAfterInsertMu sync.Mutex
var photosPhotoTagAfterInsertHooks []PhotosPhotoTagHook

var photosPhotoTagBeforeUpdateMu sync.Mutex
var photosPhotoTagBeforeUpdateHooks []PhotosPhotoTagHook
var photosPhotoTagAfterUpdateMu sync.Mutex
var photosPhotoTagAfterUpdateHooks []PhotosPhotoTagHook

var photosPhotoTagBeforeDeleteMu sync.Mutex
var photosPhotoTagBeforeDeleteHooks []PhotosPhotoTagHook
var photosPhotoTagAfterDeleteMu sync.Mutex
var photosPhotoTagAfterDeleteHooks []PhotosPhotoTagHook

var photosPhotoTagBeforeUpsertMu sync.Mutex
var photosPhotoTagBeforeUpsertHooks []PhotosPhotoTagHook
var photosPhotoTagAfterUpsertMu sync.Mutex
var photosPhotoTagAfterUpsertHooks []PhotosPhotoTagHook

// doAfterSelectHooks executes all "after Select" hooks.
func (o *PhotosPhotoTag) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range photosPhotoTagAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *PhotosPhotoTag) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range photosPhotoTagBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *PhotosPhotoTag) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range photosPhotoTagAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *PhotosPhotoTag) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range photosPhotoTagBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *PhotosPhotoTag) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range photosPhotoTagAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *PhotosPhotoTag) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range photosPhotoTagBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *PhotosPhotoTag) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range photosPhotoTagAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *PhotosPhotoTag) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range photosPhotoTagBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *PhotosPhotoTag) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range photosPhotoTagAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddPhotosPhotoTagHook registers your hook function for all future operations.
func AddPhotosPhotoTagHook(hookPoint boil.HookPoint, photosPhotoTagHook PhotosPhotoTagHook) {
	switch hookPoint {
	case boil.AfterSelectHook:
		photosPhotoTagAfterSelectMu.Lock()
		photosPhotoTagAfterSelectHooks = append(photosPhotoTagAfterSelectHooks, photosPhotoTagHook)
		photosPhotoTagAfterSelectMu.Unlock()
	case boil.BeforeInsertHook:
		photosPhotoTagBeforeInsertMu.Lock()
		photosPhotoTagBeforeInsertHooks = append(photosPhotoTagBeforeInsertHooks, photosPhotoTagHook)
		photosPhotoTagBeforeInsertMu.Unlock()
	case boil.AfterInsertHook:
		photosPhotoTagAfterInsertMu.Lock()
		photosPhotoTagAfterInsertHooks = append(photosPhotoTagAfterInsertHooks, photosPhotoTagHook)
		photosPhotoTagAfterInsertMu.Unlock()
	case boil.BeforeUpdateHook:
		photosPhotoTagBeforeUpdateMu.Lock()
		photosPhotoTagBeforeUpdateHooks = append(photosPhotoTagBeforeUpdateHooks, photosPhotoTagHook)
		photosPhotoTagBeforeUpdateMu.Unlock()
	case boil.AfterUpdateHook:
		photosPhotoTagAfterUpdateMu.Lock()
		photosPhotoTagAfterUpdateHooks = append(photosPhotoTagAfterUpdateHooks, photosPhotoTagHook)
		photosPhotoTagAfterUpdateMu.Unlock()
	case boil.BeforeDeleteHook:
		photosPhotoTagBeforeDeleteMu.Lock()
		photosPhotoTagBeforeDeleteHooks = append(photosPhotoTagBeforeDeleteHooks, photosPhotoTagHook)
		photosPhotoTagBeforeDeleteMu.Unlock()
	case boil.AfterDeleteHook:
		photosPhotoTagAfterDeleteMu.Lock()
		photosPhotoTagAfterDeleteHooks = append(photosPhotoTagAfterDeleteHooks, photosPhotoTagHook)
		photosPhotoTagAfterDeleteMu.Unlock()
	case boil.BeforeUpsertHook:
		photosPhotoTagBeforeUpsertMu.Lock()
		photosPhotoTagBeforeUpsertHooks = append(photosPhotoTagBeforeUpsertHooks, photosPhotoTagHook)
		photosPhotoTagBeforeUpsertMu.Unlock()
	case boil.AfterUpsertHook:
		photosPhotoTagAfterUpsertMu.Lock()
		photosPhotoTagAfterUpsertHooks = append(photosPhotoTagAfterUpsertHooks, photosPhotoTagHook)
		photosPhotoTagAfterUpsertMu.Unlock()
	}
}

// One returns a single photosPhotoTag record from the query.
func (q photosPhotoTagQuery) One(ctx context.Context, exec boil.ContextExecutor) (*PhotosPhotoTag, error) {
	o := &PhotosPhotoTag{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "dbmodels: failed to execute a one query for photos_photo_tags")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all PhotosPhotoTag records from the query.
func (q photosPhotoTagQuery) All(ctx context.Context, exec boil.ContextExecutor) (PhotosPhotoTagSlice, error) {
	var o []*PhotosPhotoTag

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "dbmodels: failed to assign all query results to PhotosPhotoTag slice")
	}

	if len(photosPhotoTagAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all PhotosPhotoTag records in the query.
func (q photosPhotoTagQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "dbmodels: failed to count photos_photo_tags rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q photosPhotoTagQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "dbmodels: failed to check if photos_photo_tags exists")
	}

	return count > 0, nil
}

// PhotoTag pointed to by the foreign key.
func (o *PhotosPhotoTag) PhotoTag(mods ...qm.QueryMod) photoTagQuery {
	queryMods := []qm.QueryMod{
		qm.Where("`photo_tag_id` = ?", o.PhotoTagID),
	}

	queryMods = append(queryMods, mods...)

	return PhotoTags(queryMods...)
}

// Photo pointed to by the foreign key.
func (o *PhotosPhotoTag) Photo(mods ...qm.QueryMod) photoQuery {
	queryMods := []qm.QueryMod{
		qm.Where("`photo_id` = ?", o.PhotoID),
	}

	queryMods = append(queryMods, mods...)

	return Photos(queryMods...)
}

// LoadPhotoTag allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (photosPhotoTagL) LoadPhotoTag(ctx context.Context, e boil.ContextExecutor, singular bool, maybePhotosPhotoTag interface{}, mods queries.Applicator) error {
	var slice []*PhotosPhotoTag
	var object *PhotosPhotoTag

	if singular {
		var ok bool
		object, ok = maybePhotosPhotoTag.(*PhotosPhotoTag)
		if !ok {
			object = new(PhotosPhotoTag)
			ok = queries.SetFromEmbeddedStruct(&object, &maybePhotosPhotoTag)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybePhotosPhotoTag))
			}
		}
	} else {
		s, ok := maybePhotosPhotoTag.(*[]*PhotosPhotoTag)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybePhotosPhotoTag)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybePhotosPhotoTag))
			}
		}
	}

	args := make(map[interface{}]struct{})
	if singular {
		if object.R == nil {
			object.R = &photosPhotoTagR{}
		}
		args[object.PhotoTagID] = struct{}{}

	} else {
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &photosPhotoTagR{}
			}

			args[obj.PhotoTagID] = struct{}{}

		}
	}

	if len(args) == 0 {
		return nil
	}

	argsSlice := make([]interface{}, len(args))
	i := 0
	for arg := range args {
		argsSlice[i] = arg
		i++
	}

	query := NewQuery(
		qm.From(`photo_tags`),
		qm.WhereIn(`photo_tags.photo_tag_id in ?`, argsSlice...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load PhotoTag")
	}

	var resultSlice []*PhotoTag
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice PhotoTag")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for photo_tags")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for photo_tags")
	}

	if len(photoTagAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.PhotoTag = foreign
		if foreign.R == nil {
			foreign.R = &photoTagR{}
		}
		foreign.R.PhotosPhotoTags = append(foreign.R.PhotosPhotoTags, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.PhotoTagID == foreign.PhotoTagID {
				local.R.PhotoTag = foreign
				if foreign.R == nil {
					foreign.R = &photoTagR{}
				}
				foreign.R.PhotosPhotoTags = append(foreign.R.PhotosPhotoTags, local)
				break
			}
		}
	}

	return nil
}

// LoadPhoto allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (photosPhotoTagL) LoadPhoto(ctx context.Context, e boil.ContextExecutor, singular bool, maybePhotosPhotoTag interface{}, mods queries.Applicator) error {
	var slice []*PhotosPhotoTag
	var object *PhotosPhotoTag

	if singular {
		var ok bool
		object, ok = maybePhotosPhotoTag.(*PhotosPhotoTag)
		if !ok {
			object = new(PhotosPhotoTag)
			ok = queries.SetFromEmbeddedStruct(&object, &maybePhotosPhotoTag)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybePhotosPhotoTag))
			}
		}
	} else {
		s, ok := maybePhotosPhotoTag.(*[]*PhotosPhotoTag)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybePhotosPhotoTag)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybePhotosPhotoTag))
			}
		}
	}

	args := make(map[interface{}]struct{})
	if singular {
		if object.R == nil {
			object.R = &photosPhotoTagR{}
		}
		args[object.PhotoID] = struct{}{}

	} else {
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &photosPhotoTagR{}
			}

			args[obj.PhotoID] = struct{}{}

		}
	}

	if len(args) == 0 {
		return nil
	}

	argsSlice := make([]interface{}, len(args))
	i := 0
	for arg := range args {
		argsSlice[i] = arg
		i++
	}

	query := NewQuery(
		qm.From(`photos`),
		qm.WhereIn(`photos.photo_id in ?`, argsSlice...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Photo")
	}

	var resultSlice []*Photo
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Photo")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for photos")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for photos")
	}

	if len(photoAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.Photo = foreign
		if foreign.R == nil {
			foreign.R = &photoR{}
		}
		foreign.R.PhotosPhotoTags = append(foreign.R.PhotosPhotoTags, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.PhotoID == foreign.PhotoID {
				local.R.Photo = foreign
				if foreign.R == nil {
					foreign.R = &photoR{}
				}
				foreign.R.PhotosPhotoTags = append(foreign.R.PhotosPhotoTags, local)
				break
			}
		}
	}

	return nil
}

// SetPhotoTag of the photosPhotoTag to the related item.
// Sets o.R.PhotoTag to related.
// Adds o to related.R.PhotosPhotoTags.
func (o *PhotosPhotoTag) SetPhotoTag(ctx context.Context, exec boil.ContextExecutor, insert bool, related *PhotoTag) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE `photos_photo_tags` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, []string{"photo_tag_id"}),
		strmangle.WhereClause("`", "`", 0, photosPhotoTagPrimaryKeyColumns),
	)
	values := []interface{}{related.PhotoTagID, o.PhotoID, o.PhotoTagID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.PhotoTagID = related.PhotoTagID
	if o.R == nil {
		o.R = &photosPhotoTagR{
			PhotoTag: related,
		}
	} else {
		o.R.PhotoTag = related
	}

	if related.R == nil {
		related.R = &photoTagR{
			PhotosPhotoTags: PhotosPhotoTagSlice{o},
		}
	} else {
		related.R.PhotosPhotoTags = append(related.R.PhotosPhotoTags, o)
	}

	return nil
}

// SetPhoto of the photosPhotoTag to the related item.
// Sets o.R.Photo to related.
// Adds o to related.R.PhotosPhotoTags.
func (o *PhotosPhotoTag) SetPhoto(ctx context.Context, exec boil.ContextExecutor, insert bool, related *Photo) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE `photos_photo_tags` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, []string{"photo_id"}),
		strmangle.WhereClause("`", "`", 0, photosPhotoTagPrimaryKeyColumns),
	)
	values := []interface{}{related.PhotoID, o.PhotoID, o.PhotoTagID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.PhotoID = related.PhotoID
	if o.R == nil {
		o.R = &photosPhotoTagR{
			Photo: related,
		}
	} else {
		o.R.Photo = related
	}

	if related.R == nil {
		related.R = &photoR{
			PhotosPhotoTags: PhotosPhotoTagSlice{o},
		}
	} else {
		related.R.PhotosPhotoTags = append(related.R.PhotosPhotoTags, o)
	}

	return nil
}

// PhotosPhotoTags retrieves all the records using an executor.
func PhotosPhotoTags(mods ...qm.QueryMod) photosPhotoTagQuery {
	mods = append(mods, qm.From("`photos_photo_tags`"))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"`photos_photo_tags`.*"})
	}

	return photosPhotoTagQuery{q}
}

// FindPhotosPhotoTag retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindPhotosPhotoTag(ctx context.Context, exec boil.ContextExecutor, photoID string, photoTagID string, selectCols ...string) (*PhotosPhotoTag, error) {
	photosPhotoTagObj := &PhotosPhotoTag{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from `photos_photo_tags` where `photo_id`=? AND `photo_tag_id`=?", sel,
	)

	q := queries.Raw(query, photoID, photoTagID)

	err := q.Bind(ctx, exec, photosPhotoTagObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "dbmodels: unable to select from photos_photo_tags")
	}

	if err = photosPhotoTagObj.doAfterSelectHooks(ctx, exec); err != nil {
		return photosPhotoTagObj, err
	}

	return photosPhotoTagObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *PhotosPhotoTag) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("dbmodels: no photos_photo_tags provided for insertion")
	}

	var err error
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if o.CreatedAt.IsZero() {
			o.CreatedAt = currTime
		}
		if o.UpdatedAt.IsZero() {
			o.UpdatedAt = currTime
		}
	}

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(photosPhotoTagColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	photosPhotoTagInsertCacheMut.RLock()
	cache, cached := photosPhotoTagInsertCache[key]
	photosPhotoTagInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			photosPhotoTagAllColumns,
			photosPhotoTagColumnsWithDefault,
			photosPhotoTagColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(photosPhotoTagType, photosPhotoTagMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(photosPhotoTagType, photosPhotoTagMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO `photos_photo_tags` (`%s`) %%sVALUES (%s)%%s", strings.Join(wl, "`,`"), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO `photos_photo_tags` () VALUES ()%s%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			cache.retQuery = fmt.Sprintf("SELECT `%s` FROM `photos_photo_tags` WHERE %s", strings.Join(returnColumns, "`,`"), strmangle.WhereClause("`", "`", 0, photosPhotoTagPrimaryKeyColumns))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	_, err = exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "dbmodels: unable to insert into photos_photo_tags")
	}

	var identifierCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	identifierCols = []interface{}{
		o.PhotoID,
		o.PhotoTagID,
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.retQuery)
		fmt.Fprintln(writer, identifierCols...)
	}
	err = exec.QueryRowContext(ctx, cache.retQuery, identifierCols...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	if err != nil {
		return errors.Wrap(err, "dbmodels: unable to populate default values for photos_photo_tags")
	}

CacheNoHooks:
	if !cached {
		photosPhotoTagInsertCacheMut.Lock()
		photosPhotoTagInsertCache[key] = cache
		photosPhotoTagInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the PhotosPhotoTag.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *PhotosPhotoTag) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		o.UpdatedAt = currTime
	}

	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	photosPhotoTagUpdateCacheMut.RLock()
	cache, cached := photosPhotoTagUpdateCache[key]
	photosPhotoTagUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			photosPhotoTagAllColumns,
			photosPhotoTagPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("dbmodels: unable to update photos_photo_tags, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE `photos_photo_tags` SET %s WHERE %s",
			strmangle.SetParamNames("`", "`", 0, wl),
			strmangle.WhereClause("`", "`", 0, photosPhotoTagPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(photosPhotoTagType, photosPhotoTagMapping, append(wl, photosPhotoTagPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "dbmodels: unable to update photos_photo_tags row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "dbmodels: failed to get rows affected by update for photos_photo_tags")
	}

	if !cached {
		photosPhotoTagUpdateCacheMut.Lock()
		photosPhotoTagUpdateCache[key] = cache
		photosPhotoTagUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q photosPhotoTagQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "dbmodels: unable to update all for photos_photo_tags")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "dbmodels: unable to retrieve rows affected for photos_photo_tags")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o PhotosPhotoTagSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("dbmodels: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), photosPhotoTagPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE `photos_photo_tags` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, photosPhotoTagPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "dbmodels: unable to update all in photosPhotoTag slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "dbmodels: unable to retrieve rows affected all in update all photosPhotoTag")
	}
	return rowsAff, nil
}

var mySQLPhotosPhotoTagUniqueColumns = []string{}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *PhotosPhotoTag) Upsert(ctx context.Context, exec boil.ContextExecutor, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("dbmodels: no photos_photo_tags provided for upsert")
	}
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if o.CreatedAt.IsZero() {
			o.CreatedAt = currTime
		}
		o.UpdatedAt = currTime
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(photosPhotoTagColumnsWithDefault, o)
	nzUniques := queries.NonZeroDefaultSet(mySQLPhotosPhotoTagUniqueColumns, o)

	if len(nzUniques) == 0 {
		return errors.New("cannot upsert with a table that cannot conflict on a unique column")
	}

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzUniques {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	photosPhotoTagUpsertCacheMut.RLock()
	cache, cached := photosPhotoTagUpsertCache[key]
	photosPhotoTagUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, _ := insertColumns.InsertColumnSet(
			photosPhotoTagAllColumns,
			photosPhotoTagColumnsWithDefault,
			photosPhotoTagColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			photosPhotoTagAllColumns,
			photosPhotoTagPrimaryKeyColumns,
		)

		if !updateColumns.IsNone() && len(update) == 0 {
			return errors.New("dbmodels: unable to upsert photos_photo_tags, could not build update column list")
		}

		ret := strmangle.SetComplement(photosPhotoTagAllColumns, strmangle.SetIntersect(insert, update))

		cache.query = buildUpsertQueryMySQL(dialect, "`photos_photo_tags`", update, insert)
		cache.retQuery = fmt.Sprintf(
			"SELECT %s FROM `photos_photo_tags` WHERE %s",
			strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, ret), ","),
			strmangle.WhereClause("`", "`", 0, nzUniques),
		)

		cache.valueMapping, err = queries.BindMapping(photosPhotoTagType, photosPhotoTagMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(photosPhotoTagType, photosPhotoTagMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	_, err = exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "dbmodels: unable to upsert for photos_photo_tags")
	}

	var uniqueMap []uint64
	var nzUniqueCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	uniqueMap, err = queries.BindMapping(photosPhotoTagType, photosPhotoTagMapping, nzUniques)
	if err != nil {
		return errors.Wrap(err, "dbmodels: unable to retrieve unique values for photos_photo_tags")
	}
	nzUniqueCols = queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), uniqueMap)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.retQuery)
		fmt.Fprintln(writer, nzUniqueCols...)
	}
	err = exec.QueryRowContext(ctx, cache.retQuery, nzUniqueCols...).Scan(returns...)
	if err != nil {
		return errors.Wrap(err, "dbmodels: unable to populate default values for photos_photo_tags")
	}

CacheNoHooks:
	if !cached {
		photosPhotoTagUpsertCacheMut.Lock()
		photosPhotoTagUpsertCache[key] = cache
		photosPhotoTagUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single PhotosPhotoTag record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *PhotosPhotoTag) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("dbmodels: no PhotosPhotoTag provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), photosPhotoTagPrimaryKeyMapping)
	sql := "DELETE FROM `photos_photo_tags` WHERE `photo_id`=? AND `photo_tag_id`=?"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "dbmodels: unable to delete from photos_photo_tags")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "dbmodels: failed to get rows affected by delete for photos_photo_tags")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q photosPhotoTagQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("dbmodels: no photosPhotoTagQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "dbmodels: unable to delete all from photos_photo_tags")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "dbmodels: failed to get rows affected by deleteall for photos_photo_tags")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o PhotosPhotoTagSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(photosPhotoTagBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), photosPhotoTagPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM `photos_photo_tags` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, photosPhotoTagPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "dbmodels: unable to delete all from photosPhotoTag slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "dbmodels: failed to get rows affected by deleteall for photos_photo_tags")
	}

	if len(photosPhotoTagAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *PhotosPhotoTag) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindPhotosPhotoTag(ctx, exec, o.PhotoID, o.PhotoTagID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *PhotosPhotoTagSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := PhotosPhotoTagSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), photosPhotoTagPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT `photos_photo_tags`.* FROM `photos_photo_tags` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, photosPhotoTagPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "dbmodels: unable to reload all in PhotosPhotoTagSlice")
	}

	*o = slice

	return nil
}

// PhotosPhotoTagExists checks if the PhotosPhotoTag row exists.
func PhotosPhotoTagExists(ctx context.Context, exec boil.ContextExecutor, photoID string, photoTagID string) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from `photos_photo_tags` where `photo_id`=? AND `photo_tag_id`=? limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, photoID, photoTagID)
	}
	row := exec.QueryRowContext(ctx, sql, photoID, photoTagID)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "dbmodels: unable to check if photos_photo_tags exists")
	}

	return exists, nil
}

// Exists checks if the PhotosPhotoTag row exists.
func (o *PhotosPhotoTag) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	return PhotosPhotoTagExists(ctx, exec, o.PhotoID, o.PhotoTagID)
}

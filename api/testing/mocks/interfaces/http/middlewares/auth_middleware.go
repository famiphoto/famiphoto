// Code generated by MockGen. DO NOT EDIT.
// Source: interfaces/http/middlewares/auth_middleware.go

// Package mock_middlewares is a generated GoMock package.
package mock_middlewares

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	echo "github.com/labstack/echo/v4"
)

// MockAuthMiddleware is a mock of AuthMiddleware interface.
type MockAuthMiddleware struct {
	ctrl     *gomock.Controller
	recorder *MockAuthMiddlewareMockRecorder
}

// MockAuthMiddlewareMockRecorder is the mock recorder for MockAuthMiddleware.
type MockAuthMiddlewareMockRecorder struct {
	mock *MockAuthMiddleware
}

// NewMockAuthMiddleware creates a new mock instance.
func NewMockAuthMiddleware(ctrl *gomock.Controller) *MockAuthMiddleware {
	mock := &MockAuthMiddleware{ctrl: ctrl}
	mock.recorder = &MockAuthMiddlewareMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAuthMiddleware) EXPECT() *MockAuthMiddlewareMockRecorder {
	return m.recorder
}

// AuthAdmin mocks base method.
func (m *MockAuthMiddleware) AuthAdmin(next echo.HandlerFunc) echo.HandlerFunc {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AuthAdmin", next)
	ret0, _ := ret[0].(echo.HandlerFunc)
	return ret0
}

// AuthAdmin indicates an expected call of AuthAdmin.
func (mr *MockAuthMiddlewareMockRecorder) AuthAdmin(next interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AuthAdmin", reflect.TypeOf((*MockAuthMiddleware)(nil).AuthAdmin), next)
}

// AuthUser mocks base method.
func (m *MockAuthMiddleware) AuthUser(next echo.HandlerFunc) echo.HandlerFunc {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AuthUser", next)
	ret0, _ := ret[0].(echo.HandlerFunc)
	return ret0
}

// AuthUser indicates an expected call of AuthUser.
func (mr *MockAuthMiddlewareMockRecorder) AuthUser(next interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AuthUser", reflect.TypeOf((*MockAuthMiddleware)(nil).AuthUser), next)
}

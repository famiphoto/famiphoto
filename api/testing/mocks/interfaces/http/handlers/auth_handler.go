// Code generated by MockGen. DO NOT EDIT.
// Source: interfaces/http/handlers/auth_handler.go

// Package mock_handlers is a generated GoMock package.
package mock_handlers

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	echo "github.com/labstack/echo/v4"
)

// MockAuthHandler is a mock of AuthHandler interface.
type MockAuthHandler struct {
	ctrl     *gomock.Controller
	recorder *MockAuthHandlerMockRecorder
}

// MockAuthHandlerMockRecorder is the mock recorder for MockAuthHandler.
type MockAuthHandlerMockRecorder struct {
	mock *MockAuthHandler
}

// NewMockAuthHandler creates a new mock instance.
func NewMockAuthHandler(ctrl *gomock.Controller) *MockAuthHandler {
	mock := &MockAuthHandler{ctrl: ctrl}
	mock.recorder = &MockAuthHandlerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAuthHandler) EXPECT() *MockAuthHandlerMockRecorder {
	return m.recorder
}

// SignIn mocks base method.
func (m *MockAuthHandler) SignIn(c echo.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SignIn", c)
	ret0, _ := ret[0].(error)
	return ret0
}

// SignIn indicates an expected call of SignIn.
func (mr *MockAuthHandlerMockRecorder) SignIn(c interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SignIn", reflect.TypeOf((*MockAuthHandler)(nil).SignIn), c)
}

// SignOut mocks base method.
func (m *MockAuthHandler) SignOut(c echo.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SignOut", c)
	ret0, _ := ret[0].(error)
	return ret0
}

// SignOut indicates an expected call of SignOut.
func (mr *MockAuthHandlerMockRecorder) SignOut(c interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SignOut", reflect.TypeOf((*MockAuthHandler)(nil).SignOut), c)
}

// SignUp mocks base method.
func (m *MockAuthHandler) SignUp(c echo.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SignUp", c)
	ret0, _ := ret[0].(error)
	return ret0
}

// SignUp indicates an expected call of SignUp.
func (mr *MockAuthHandlerMockRecorder) SignUp(c interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SignUp", reflect.TypeOf((*MockAuthHandler)(nil).SignUp), c)
}

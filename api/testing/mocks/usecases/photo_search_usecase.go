// Code generated by MockGen. DO NOT EDIT.
// Source: usecases/photo_search_usecase.go

// Package mock_usecases is a generated GoMock package.
package mock_usecases

import (
	context "context"
	reflect "reflect"

	entities "github.com/famiphoto/famiphoto/api/entities"
	gomock "github.com/golang/mock/gomock"
)

// MockPhotoSearchUseCase is a mock of PhotoSearchUseCase interface.
type MockPhotoSearchUseCase struct {
	ctrl     *gomock.Controller
	recorder *MockPhotoSearchUseCaseMockRecorder
}

// MockPhotoSearchUseCaseMockRecorder is the mock recorder for MockPhotoSearchUseCase.
type MockPhotoSearchUseCaseMockRecorder struct {
	mock *MockPhotoSearchUseCase
}

// NewMockPhotoSearchUseCase creates a new mock instance.
func NewMockPhotoSearchUseCase(ctrl *gomock.Controller) *MockPhotoSearchUseCase {
	mock := &MockPhotoSearchUseCase{ctrl: ctrl}
	mock.recorder = &MockPhotoSearchUseCaseMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockPhotoSearchUseCase) EXPECT() *MockPhotoSearchUseCaseMockRecorder {
	return m.recorder
}

// GetByPhotoID mocks base method.
func (m *MockPhotoSearchUseCase) GetByPhotoID(ctx context.Context, photoID string) (*entities.PhotoSearchResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByPhotoID", ctx, photoID)
	ret0, _ := ret[0].(*entities.PhotoSearchResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByPhotoID indicates an expected call of GetByPhotoID.
func (mr *MockPhotoSearchUseCaseMockRecorder) GetByPhotoID(ctx, photoID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByPhotoID", reflect.TypeOf((*MockPhotoSearchUseCase)(nil).GetByPhotoID), ctx, photoID)
}

// Search mocks base method.
func (m *MockPhotoSearchUseCase) Search(ctx context.Context, photoSearchQuery *entities.PhotoSearchQuery) (*entities.PhotoSearchResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Search", ctx, photoSearchQuery)
	ret0, _ := ret[0].(*entities.PhotoSearchResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Search indicates an expected call of Search.
func (mr *MockPhotoSearchUseCaseMockRecorder) Search(ctx, photoSearchQuery interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Search", reflect.TypeOf((*MockPhotoSearchUseCase)(nil).Search), ctx, photoSearchQuery)
}

// Code generated by MockGen. DO NOT EDIT.
// Source: usecases/photo_indexing_usecase.go

// Package mock_usecases is a generated GoMock package.
package mock_usecases

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockPhotoIndexingUseCase is a mock of PhotoIndexingUseCase interface.
type MockPhotoIndexingUseCase struct {
	ctrl     *gomock.Controller
	recorder *MockPhotoIndexingUseCaseMockRecorder
}

// MockPhotoIndexingUseCaseMockRecorder is the mock recorder for MockPhotoIndexingUseCase.
type MockPhotoIndexingUseCaseMockRecorder struct {
	mock *MockPhotoIndexingUseCase
}

// NewMockPhotoIndexingUseCase creates a new mock instance.
func NewMockPhotoIndexingUseCase(ctrl *gomock.Controller) *MockPhotoIndexingUseCase {
	mock := &MockPhotoIndexingUseCase{ctrl: ctrl}
	mock.recorder = &MockPhotoIndexingUseCaseMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockPhotoIndexingUseCase) EXPECT() *MockPhotoIndexingUseCaseMockRecorder {
	return m.recorder
}

// IndexPhotos mocks base method.
func (m *MockPhotoIndexingUseCase) IndexPhotos(ctx context.Context, extensions []string, maxParallels int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IndexPhotos", ctx, extensions, maxParallels)
	ret0, _ := ret[0].(error)
	return ret0
}

// IndexPhotos indicates an expected call of IndexPhotos.
func (mr *MockPhotoIndexingUseCaseMockRecorder) IndexPhotos(ctx, extensions, maxParallels interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IndexPhotos", reflect.TypeOf((*MockPhotoIndexingUseCase)(nil).IndexPhotos), ctx, extensions, maxParallels)
}

// Code generated by MockGen. DO NOT EDIT.
// Source: infrastructures/repositories/session_repository.go

// Package mock_repositories is a generated GoMock package.
package mock_repositories

import (
	context "context"
	reflect "reflect"
	time "time"

	gomock "github.com/golang/mock/gomock"
)

// MockSessionRepository is a mock of SessionRepository interface.
type MockSessionRepository struct {
	ctrl     *gomock.Controller
	recorder *MockSessionRepositoryMockRecorder
}

// MockSessionRepositoryMockRecorder is the mock recorder for MockSessionRepository.
type MockSessionRepositoryMockRecorder struct {
	mock *MockSessionRepository
}

// NewMockSessionRepository creates a new mock instance.
func NewMockSessionRepository(ctrl *gomock.Controller) *MockSessionRepository {
	mock := &MockSessionRepository{ctrl: ctrl}
	mock.recorder = &MockSessionRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSessionRepository) EXPECT() *MockSessionRepositoryMockRecorder {
	return m.recorder
}

// AddSessionID mocks base method.
func (m *MockSessionRepository) AddSessionID(ctx context.Context, userID, sessionID string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddSessionID", ctx, userID, sessionID)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddSessionID indicates an expected call of AddSessionID.
func (mr *MockSessionRepositoryMockRecorder) AddSessionID(ctx, userID, sessionID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddSessionID", reflect.TypeOf((*MockSessionRepository)(nil).AddSessionID), ctx, userID, sessionID)
}

// Delete mocks base method.
func (m *MockSessionRepository) Delete(ctx context.Context, sessionID string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", ctx, sessionID)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockSessionRepositoryMockRecorder) Delete(ctx, sessionID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockSessionRepository)(nil).Delete), ctx, sessionID)
}

// Get mocks base method.
func (m *MockSessionRepository) Get(ctx context.Context, sessionID string) (map[any]any, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", ctx, sessionID)
	ret0, _ := ret[0].(map[any]any)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockSessionRepositoryMockRecorder) Get(ctx, sessionID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockSessionRepository)(nil).Get), ctx, sessionID)
}

// GetSessionIDs mocks base method.
func (m *MockSessionRepository) GetSessionIDs(ctx context.Context, userID string) ([]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSessionIDs", ctx, userID)
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSessionIDs indicates an expected call of GetSessionIDs.
func (mr *MockSessionRepositoryMockRecorder) GetSessionIDs(ctx, userID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSessionIDs", reflect.TypeOf((*MockSessionRepository)(nil).GetSessionIDs), ctx, userID)
}

// RemoveSessionID mocks base method.
func (m *MockSessionRepository) RemoveSessionID(ctx context.Context, userID, sessionID string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RemoveSessionID", ctx, userID, sessionID)
	ret0, _ := ret[0].(error)
	return ret0
}

// RemoveSessionID indicates an expected call of RemoveSessionID.
func (mr *MockSessionRepositoryMockRecorder) RemoveSessionID(ctx, userID, sessionID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveSessionID", reflect.TypeOf((*MockSessionRepository)(nil).RemoveSessionID), ctx, userID, sessionID)
}

// Save mocks base method.
func (m *MockSessionRepository) Save(ctx context.Context, sessionID string, data map[any]any, expire time.Duration) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Save", ctx, sessionID, data, expire)
	ret0, _ := ret[0].(error)
	return ret0
}

// Save indicates an expected call of Save.
func (mr *MockSessionRepositoryMockRecorder) Save(ctx, sessionID, data, expire interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Save", reflect.TypeOf((*MockSessionRepository)(nil).Save), ctx, sessionID, data, expire)
}

// Code generated by MockGen. DO NOT EDIT.
// Source: infrastructures/repositories/photo_file_repository.go

// Package mock_repositories is a generated GoMock package.
package mock_repositories

import (
	context "context"
	reflect "reflect"

	dbmodels "github.com/famiphoto/famiphoto/api/infrastructures/dbmodels"
	gomock "github.com/golang/mock/gomock"
)

// MockPhotoFileRepository is a mock of PhotoFileRepository interface.
type MockPhotoFileRepository struct {
	ctrl     *gomock.Controller
	recorder *MockPhotoFileRepositoryMockRecorder
}

// MockPhotoFileRepositoryMockRecorder is the mock recorder for MockPhotoFileRepository.
type MockPhotoFileRepositoryMockRecorder struct {
	mock *MockPhotoFileRepository
}

// NewMockPhotoFileRepository creates a new mock instance.
func NewMockPhotoFileRepository(ctrl *gomock.Controller) *MockPhotoFileRepository {
	mock := &MockPhotoFileRepository{ctrl: ctrl}
	mock.recorder = &MockPhotoFileRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockPhotoFileRepository) EXPECT() *MockPhotoFileRepositoryMockRecorder {
	return m.recorder
}

// GetPhotoFileByFilePath mocks base method.
func (m *MockPhotoFileRepository) GetPhotoFileByFilePath(ctx context.Context, filePath string) (*dbmodels.PhotoFile, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPhotoFileByFilePath", ctx, filePath)
	ret0, _ := ret[0].(*dbmodels.PhotoFile)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPhotoFileByFilePath indicates an expected call of GetPhotoFileByFilePath.
func (mr *MockPhotoFileRepositoryMockRecorder) GetPhotoFileByFilePath(ctx, filePath interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPhotoFileByFilePath", reflect.TypeOf((*MockPhotoFileRepository)(nil).GetPhotoFileByFilePath), ctx, filePath)
}

// GetPhotoFilesByPhotoID mocks base method.
func (m *MockPhotoFileRepository) GetPhotoFilesByPhotoID(ctx context.Context, photoID string) (dbmodels.PhotoFileSlice, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPhotoFilesByPhotoID", ctx, photoID)
	ret0, _ := ret[0].(dbmodels.PhotoFileSlice)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPhotoFilesByPhotoID indicates an expected call of GetPhotoFilesByPhotoID.
func (mr *MockPhotoFileRepositoryMockRecorder) GetPhotoFilesByPhotoID(ctx, photoID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPhotoFilesByPhotoID", reflect.TypeOf((*MockPhotoFileRepository)(nil).GetPhotoFilesByPhotoID), ctx, photoID)
}

// Insert mocks base method.
func (m *MockPhotoFileRepository) Insert(ctx context.Context, photoFile *dbmodels.PhotoFile) (*dbmodels.PhotoFile, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Insert", ctx, photoFile)
	ret0, _ := ret[0].(*dbmodels.PhotoFile)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Insert indicates an expected call of Insert.
func (mr *MockPhotoFileRepositoryMockRecorder) Insert(ctx, photoFile interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Insert", reflect.TypeOf((*MockPhotoFileRepository)(nil).Insert), ctx, photoFile)
}

// Update mocks base method.
func (m *MockPhotoFileRepository) Update(ctx context.Context, photoFile *dbmodels.PhotoFile) (*dbmodels.PhotoFile, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", ctx, photoFile)
	ret0, _ := ret[0].(*dbmodels.PhotoFile)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Update indicates an expected call of Update.
func (mr *MockPhotoFileRepositoryMockRecorder) Update(ctx, photoFile interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockPhotoFileRepository)(nil).Update), ctx, photoFile)
}

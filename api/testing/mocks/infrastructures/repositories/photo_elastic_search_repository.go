// Code generated by MockGen. DO NOT EDIT.
// Source: infrastructures/repositories/photo_elastic_search_repository.go

// Package mock_repositories is a generated GoMock package.
package mock_repositories

import (
	context "context"
	reflect "reflect"

	models "github.com/famiphoto/famiphoto/api/infrastructures/models"
	gomock "github.com/golang/mock/gomock"
)

// MockPhotoElasticSearchRepository is a mock of PhotoElasticSearchRepository interface.
type MockPhotoElasticSearchRepository struct {
	ctrl     *gomock.Controller
	recorder *MockPhotoElasticSearchRepositoryMockRecorder
}

// MockPhotoElasticSearchRepositoryMockRecorder is the mock recorder for MockPhotoElasticSearchRepository.
type MockPhotoElasticSearchRepositoryMockRecorder struct {
	mock *MockPhotoElasticSearchRepository
}

// NewMockPhotoElasticSearchRepository creates a new mock instance.
func NewMockPhotoElasticSearchRepository(ctrl *gomock.Controller) *MockPhotoElasticSearchRepository {
	mock := &MockPhotoElasticSearchRepository{ctrl: ctrl}
	mock.recorder = &MockPhotoElasticSearchRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockPhotoElasticSearchRepository) EXPECT() *MockPhotoElasticSearchRepositoryMockRecorder {
	return m.recorder
}

// BulkIndex mocks base method.
func (m *MockPhotoElasticSearchRepository) BulkIndex(ctx context.Context, docs []*models.PhotoIndex) ([]string, map[string]error, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BulkIndex", ctx, docs)
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(map[string]error)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// BulkIndex indicates an expected call of BulkIndex.
func (mr *MockPhotoElasticSearchRepositoryMockRecorder) BulkIndex(ctx, docs interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BulkIndex", reflect.TypeOf((*MockPhotoElasticSearchRepository)(nil).BulkIndex), ctx, docs)
}

// CreateIndex mocks base method.
func (m *MockPhotoElasticSearchRepository) CreateIndex(ctx context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateIndex", ctx)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateIndex indicates an expected call of CreateIndex.
func (mr *MockPhotoElasticSearchRepositoryMockRecorder) CreateIndex(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateIndex", reflect.TypeOf((*MockPhotoElasticSearchRepository)(nil).CreateIndex), ctx)
}

// ExistsIndex mocks base method.
func (m *MockPhotoElasticSearchRepository) ExistsIndex(ctx context.Context) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ExistsIndex", ctx)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ExistsIndex indicates an expected call of ExistsIndex.
func (mr *MockPhotoElasticSearchRepositoryMockRecorder) ExistsIndex(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ExistsIndex", reflect.TypeOf((*MockPhotoElasticSearchRepository)(nil).ExistsIndex), ctx)
}

// Get mocks base method.
func (m *MockPhotoElasticSearchRepository) Get(ctx context.Context, id string) (*models.PhotoIndex, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", ctx, id)
	ret0, _ := ret[0].(*models.PhotoIndex)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockPhotoElasticSearchRepositoryMockRecorder) Get(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockPhotoElasticSearchRepository)(nil).Get), ctx, id)
}

// Index mocks base method.
func (m *MockPhotoElasticSearchRepository) Index(ctx context.Context, doc *models.PhotoIndex) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Index", ctx, doc)
	ret0, _ := ret[0].(error)
	return ret0
}

// Index indicates an expected call of Index.
func (mr *MockPhotoElasticSearchRepositoryMockRecorder) Index(ctx, doc interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Index", reflect.TypeOf((*MockPhotoElasticSearchRepository)(nil).Index), ctx, doc)
}

// List mocks base method.
func (m *MockPhotoElasticSearchRepository) List(ctx context.Context, limit, offset int) ([]*models.PhotoIndex, int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "List", ctx, limit, offset)
	ret0, _ := ret[0].([]*models.PhotoIndex)
	ret1, _ := ret[1].(int64)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// List indicates an expected call of List.
func (mr *MockPhotoElasticSearchRepositoryMockRecorder) List(ctx, limit, offset interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "List", reflect.TypeOf((*MockPhotoElasticSearchRepository)(nil).List), ctx, limit, offset)
}

// Code generated by MockGen. DO NOT EDIT.
// Source: infrastructures/repositories/photo_storage_repository.go

// Package mock_repositories is a generated GoMock package.
package mock_repositories

import (
	os "os"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockPhotoStorageRepository is a mock of PhotoStorageRepository interface.
type MockPhotoStorageRepository struct {
	ctrl     *gomock.Controller
	recorder *MockPhotoStorageRepositoryMockRecorder
}

// MockPhotoStorageRepositoryMockRecorder is the mock recorder for MockPhotoStorageRepository.
type MockPhotoStorageRepositoryMockRecorder struct {
	mock *MockPhotoStorageRepository
}

// NewMockPhotoStorageRepository creates a new mock instance.
func NewMockPhotoStorageRepository(ctrl *gomock.Controller) *MockPhotoStorageRepository {
	mock := &MockPhotoStorageRepository{ctrl: ctrl}
	mock.recorder = &MockPhotoStorageRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockPhotoStorageRepository) EXPECT() *MockPhotoStorageRepositoryMockRecorder {
	return m.recorder
}

// ReadDir mocks base method.
func (m *MockPhotoStorageRepository) ReadDir(dirPath string) ([]os.FileInfo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReadDir", dirPath)
	ret0, _ := ret[0].([]os.FileInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ReadDir indicates an expected call of ReadDir.
func (mr *MockPhotoStorageRepositoryMockRecorder) ReadDir(dirPath interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReadDir", reflect.TypeOf((*MockPhotoStorageRepository)(nil).ReadDir), dirPath)
}

// ReadFile mocks base method.
func (m *MockPhotoStorageRepository) ReadFile(path string) ([]byte, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReadFile", path)
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ReadFile indicates an expected call of ReadFile.
func (mr *MockPhotoStorageRepositoryMockRecorder) ReadFile(path interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReadFile", reflect.TypeOf((*MockPhotoStorageRepository)(nil).ReadFile), path)
}

// SaveContent mocks base method.
func (m *MockPhotoStorageRepository) SaveContent(filePath string, data []byte) (os.FileInfo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SaveContent", filePath, data)
	ret0, _ := ret[0].(os.FileInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SaveContent indicates an expected call of SaveContent.
func (mr *MockPhotoStorageRepositoryMockRecorder) SaveContent(filePath, data interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SaveContent", reflect.TypeOf((*MockPhotoStorageRepository)(nil).SaveContent), filePath, data)
}

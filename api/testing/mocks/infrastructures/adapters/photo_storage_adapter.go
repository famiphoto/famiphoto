// Code generated by MockGen. DO NOT EDIT.
// Source: infrastructures/adapters/photo_storage_adapter.go

// Package mock_adapters is a generated GoMock package.
package mock_adapters

import (
	reflect "reflect"

	entities "github.com/famiphoto/famiphoto/api/entities"
	gomock "github.com/golang/mock/gomock"
)

// MockPhotoStorageAdapter is a mock of PhotoStorageAdapter interface.
type MockPhotoStorageAdapter struct {
	ctrl     *gomock.Controller
	recorder *MockPhotoStorageAdapterMockRecorder
}

// MockPhotoStorageAdapterMockRecorder is the mock recorder for MockPhotoStorageAdapter.
type MockPhotoStorageAdapterMockRecorder struct {
	mock *MockPhotoStorageAdapter
}

// NewMockPhotoStorageAdapter creates a new mock instance.
func NewMockPhotoStorageAdapter(ctrl *gomock.Controller) *MockPhotoStorageAdapter {
	mock := &MockPhotoStorageAdapter{ctrl: ctrl}
	mock.recorder = &MockPhotoStorageAdapterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockPhotoStorageAdapter) EXPECT() *MockPhotoStorageAdapterMockRecorder {
	return m.recorder
}

// GetFileInfo mocks base method.
func (m *MockPhotoStorageAdapter) GetFileInfo(photoFile *entities.PhotoFile) (*entities.StorageFileInfo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetFileInfo", photoFile)
	ret0, _ := ret[0].(*entities.StorageFileInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetFileInfo indicates an expected call of GetFileInfo.
func (mr *MockPhotoStorageAdapterMockRecorder) GetFileInfo(photoFile interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetFileInfo", reflect.TypeOf((*MockPhotoStorageAdapter)(nil).GetFileInfo), photoFile)
}

// OpenPhoto mocks base method.
func (m *MockPhotoStorageAdapter) OpenPhoto(filePath string) (entities.StorageFileData, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "OpenPhoto", filePath)
	ret0, _ := ret[0].(entities.StorageFileData)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// OpenPhoto indicates an expected call of OpenPhoto.
func (mr *MockPhotoStorageAdapterMockRecorder) OpenPhoto(filePath interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "OpenPhoto", reflect.TypeOf((*MockPhotoStorageAdapter)(nil).OpenPhoto), filePath)
}

// ReadDir mocks base method.
func (m *MockPhotoStorageAdapter) ReadDir(dirPath string) (entities.StorageFileInfoList, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReadDir", dirPath)
	ret0, _ := ret[0].(entities.StorageFileInfoList)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ReadDir indicates an expected call of ReadDir.
func (mr *MockPhotoStorageAdapterMockRecorder) ReadDir(dirPath interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReadDir", reflect.TypeOf((*MockPhotoStorageAdapter)(nil).ReadDir), dirPath)
}

// SavePreviewImage mocks base method.
func (m *MockPhotoStorageAdapter) SavePreviewImage(photoID string, data []byte) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SavePreviewImage", photoID, data)
	ret0, _ := ret[0].(error)
	return ret0
}

// SavePreviewImage indicates an expected call of SavePreviewImage.
func (mr *MockPhotoStorageAdapterMockRecorder) SavePreviewImage(photoID, data interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SavePreviewImage", reflect.TypeOf((*MockPhotoStorageAdapter)(nil).SavePreviewImage), photoID, data)
}

// SaveThumbnailImage mocks base method.
func (m *MockPhotoStorageAdapter) SaveThumbnailImage(photoID string, data []byte) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SaveThumbnailImage", photoID, data)
	ret0, _ := ret[0].(error)
	return ret0
}

// SaveThumbnailImage indicates an expected call of SaveThumbnailImage.
func (mr *MockPhotoStorageAdapterMockRecorder) SaveThumbnailImage(photoID, data interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SaveThumbnailImage", reflect.TypeOf((*MockPhotoStorageAdapter)(nil).SaveThumbnailImage), photoID, data)
}

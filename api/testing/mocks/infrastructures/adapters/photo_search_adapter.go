// Code generated by MockGen. DO NOT EDIT.
// Source: infrastructures/adapters/photo_search_adapter.go

// Package mock_adapters is a generated GoMock package.
package mock_adapters

import (
	context "context"
	reflect "reflect"
	time "time"

	entities "github.com/famiphoto/famiphoto/api/entities"
	exif "github.com/famiphoto/famiphoto/api/utils/exif"
	gomock "github.com/golang/mock/gomock"
)

// MockPhotoSearchAdapter is a mock of PhotoSearchAdapter interface.
type MockPhotoSearchAdapter struct {
	ctrl     *gomock.Controller
	recorder *MockPhotoSearchAdapterMockRecorder
}

// MockPhotoSearchAdapterMockRecorder is the mock recorder for MockPhotoSearchAdapter.
type MockPhotoSearchAdapterMockRecorder struct {
	mock *MockPhotoSearchAdapter
}

// NewMockPhotoSearchAdapter creates a new mock instance.
func NewMockPhotoSearchAdapter(ctrl *gomock.Controller) *MockPhotoSearchAdapter {
	mock := &MockPhotoSearchAdapter{ctrl: ctrl}
	mock.recorder = &MockPhotoSearchAdapterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockPhotoSearchAdapter) EXPECT() *MockPhotoSearchAdapterMockRecorder {
	return m.recorder
}

// CreateIndexIfNotExist mocks base method.
func (m *MockPhotoSearchAdapter) CreateIndexIfNotExist(ctx context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateIndexIfNotExist", ctx)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateIndexIfNotExist indicates an expected call of CreateIndexIfNotExist.
func (mr *MockPhotoSearchAdapterMockRecorder) CreateIndexIfNotExist(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateIndexIfNotExist", reflect.TypeOf((*MockPhotoSearchAdapter)(nil).CreateIndexIfNotExist), ctx)
}

// Index mocks base method.
func (m *MockPhotoSearchAdapter) Index(ctx context.Context, photoID string, photoFiles entities.PhotoFileList, meta exif.ExifData, now time.Time) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Index", ctx, photoID, photoFiles, meta, now)
	ret0, _ := ret[0].(error)
	return ret0
}

// Index indicates an expected call of Index.
func (mr *MockPhotoSearchAdapterMockRecorder) Index(ctx, photoID, photoFiles, meta, now interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Index", reflect.TypeOf((*MockPhotoSearchAdapter)(nil).Index), ctx, photoID, photoFiles, meta, now)
}

// Search mocks base method.
func (m *MockPhotoSearchAdapter) Search(ctx context.Context, query *entities.PhotoSearchQuery) (*entities.PhotoSearchResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Search", ctx, query)
	ret0, _ := ret[0].(*entities.PhotoSearchResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Search indicates an expected call of Search.
func (mr *MockPhotoSearchAdapterMockRecorder) Search(ctx, query interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Search", reflect.TypeOf((*MockPhotoSearchAdapter)(nil).Search), ctx, query)
}

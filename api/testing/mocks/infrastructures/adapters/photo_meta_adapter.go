// Code generated by MockGen. DO NOT EDIT.
// Source: infrastructures/adapters/photo_meta_adapter.go

// Package mock_adapters is a generated GoMock package.
package mock_adapters

import (
	context "context"
	reflect "reflect"

	entities "github.com/famiphoto/famiphoto/api/entities"
	gomock "github.com/golang/mock/gomock"
)

// MockPhotoMetaAdapter is a mock of PhotoMetaAdapter interface.
type MockPhotoMetaAdapter struct {
	ctrl     *gomock.Controller
	recorder *MockPhotoMetaAdapterMockRecorder
}

// MockPhotoMetaAdapterMockRecorder is the mock recorder for MockPhotoMetaAdapter.
type MockPhotoMetaAdapterMockRecorder struct {
	mock *MockPhotoMetaAdapter
}

// NewMockPhotoMetaAdapter creates a new mock instance.
func NewMockPhotoMetaAdapter(ctrl *gomock.Controller) *MockPhotoMetaAdapter {
	mock := &MockPhotoMetaAdapter{ctrl: ctrl}
	mock.recorder = &MockPhotoMetaAdapterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockPhotoMetaAdapter) EXPECT() *MockPhotoMetaAdapterMockRecorder {
	return m.recorder
}

// Upsert mocks base method.
func (m *MockPhotoMetaAdapter) Upsert(ctx context.Context, photoID string, meta entities.PhotoMeta) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Upsert", ctx, photoID, meta)
	ret0, _ := ret[0].(error)
	return ret0
}

// Upsert indicates an expected call of Upsert.
func (mr *MockPhotoMetaAdapterMockRecorder) Upsert(ctx, photoID, meta interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Upsert", reflect.TypeOf((*MockPhotoMetaAdapter)(nil).Upsert), ctx, photoID, meta)
}

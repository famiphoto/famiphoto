// Code generated by MockGen. DO NOT EDIT.
// Source: infrastructures/adapters/user_password_adapter.go

// Package mock_adapters is a generated GoMock package.
package mock_adapters

import (
	context "context"
	reflect "reflect"
	time "time"

	gomock "github.com/golang/mock/gomock"
)

// MockUserPasswordAdapter is a mock of UserPasswordAdapter interface.
type MockUserPasswordAdapter struct {
	ctrl     *gomock.Controller
	recorder *MockUserPasswordAdapterMockRecorder
}

// MockUserPasswordAdapterMockRecorder is the mock recorder for MockUserPasswordAdapter.
type MockUserPasswordAdapterMockRecorder struct {
	mock *MockUserPasswordAdapter
}

// NewMockUserPasswordAdapter creates a new mock instance.
func NewMockUserPasswordAdapter(ctrl *gomock.Controller) *MockUserPasswordAdapter {
	mock := &MockUserPasswordAdapter{ctrl: ctrl}
	mock.recorder = &MockUserPasswordAdapterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUserPasswordAdapter) EXPECT() *MockUserPasswordAdapterMockRecorder {
	return m.recorder
}

// SetPassword mocks base method.
func (m *MockUserPasswordAdapter) SetPassword(ctx context.Context, userID, hashedPassword string, isInitialized bool, now time.Time) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetPassword", ctx, userID, hashedPassword, isInitialized, now)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetPassword indicates an expected call of SetPassword.
func (mr *MockUserPasswordAdapterMockRecorder) SetPassword(ctx, userID, hashedPassword, isInitialized, now interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetPassword", reflect.TypeOf((*MockUserPasswordAdapter)(nil).SetPassword), ctx, userID, hashedPassword, isInitialized, now)
}
